/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2022-05-19 15:19:45.130794
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91,x92,x93,x94,x95;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[5]);
x6=IKsin(j[3]);
x7=IKcos(j[3]);
x8=IKsin(j[0]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKcos(j[5]);
x12=((0.825384895380634)*x6);
x13=((0.564570433584244)*x6);
x14=((0.825384895380634)*x10);
x15=((0.29035)*x4);
x16=((0.999999999958557)*x7);
x17=((0.256350109993286)*x8);
x18=((0.256350109993286)*x0);
x19=((0.999999999958557)*x0);
x20=((0.825384895380634)*x9);
x21=((0.04079975)*x8);
x22=((0.564570433584244)*x9);
x23=((9.10415855677118e-6)*x7);
x24=((0.999999999958557)*x8);
x25=((0.15775011)*x8);
x26=((9.10415855677118e-6)*x0);
x27=((0.04079975)*x0);
x28=((1.0)*x8);
x29=((0.15775011)*x0);
x30=((0.564570433584244)*x10);
x31=((1.58487368619693e-6)*x8);
x32=((0.004)*x1);
x33=((0.042)*x8);
x34=((1.0)*x0);
x35=((0.042)*x0);
x36=((9.10415855677118e-6)*x8);
x37=((0.04079975)*x7);
x38=((1.58487368619693e-6)*x0);
x39=(x0*x6);
x40=(x3*x4);
x41=((-0.564570433584244)*x6);
x42=(x1*x2);
x43=(x2*x4);
x44=(x10*x7);
x45=((-0.825384895380634)*x10);
x46=(x0*x7);
x47=(x1*x3);
x48=((-0.564570433584244)*x9);
x49=((-0.564570433584244)*x10);
x50=(x6*x8);
x51=(x7*x8);
x52=((-1.0)*x7);
x53=((-0.825384895380634)*x9);
x54=(x36*x6);
x55=((0.564570433560846)*x51);
x56=(x28*x6);
x57=((0.04079975)*x42);
x58=((0.04079975)*x40);
x59=((9.10415855677118e-6)*x42);
x60=((-0.825384895346427)*x51);
x61=((((-1.0)*x47))+(((1.0)*x43)));
x62=((((-9.10415855677118e-6)*x43))+(((9.10415855677118e-6)*x47)));
x63=((((-1.0)*x40))+(((-1.0)*x42)));
x64=((((-9.10415855677118e-6)*x40))+(((-1.0)*x59)));
x65=((((-0.999999999958557)*x42))+(((-0.999999999958557)*x40)));
x66=((((0.999999999958557)*x40))+(((0.999999999958557)*x42)));
x67=(x58+x57);
x68=(((x0*x47))+(((-1.0)*x34*x43)));
x69=(((x47*x8))+(((-1.0)*x28*x43)));
x70=(x63*x7);
x71=(x19*(((((-1.0)*x47))+x43)));
x72=(x24*(((((-1.0)*x47))+x43)));
x73=(x34*((x42+x40)));
x74=(x26*(((((-1.0)*x40))+(((-1.0)*x42)))));
x75=(x28*((x42+x40)));
x76=(x36*(((((-1.0)*x40))+(((-1.0)*x42)))));
x77=(x68*x7);
x78=(x69*x7);
x79=(x6*x71);
x80=(x12*x71);
x81=(x20*x74);
x82=(x14*x73);
x83=(x49*x73);
x84=(x56+(((-1.0)*x77)));
x85=(x54+(((-1.0)*x23*x68)));
x86=(x54+(((-9.10415855677118e-6)*x77)));
x87=(x56+((x52*x68)));
x88=((((-1.0)*x23*x69))+(((-1.0)*x26*x6)));
x89=((((-1.0)*x39))+((x52*x69)));
x90=(x10*x88);
x91=(((x14*x61))+((x20*x70)));
x92=(((x30*x61))+((x22*x70)));
x93=(x60+x80+x81);
x94=((((-1.0)*x20*x62))+(((-1.0)*x12*x65))+(((-1.0)*x14*x64*x7)));
x95=(((x30*x75))+((x22*x89)));
eerot[0]=(((x11*((((x14*x86))+x93))))+((x5*(((((-1.0)*x20*x84))+(((-1.0)*x82))))))+((x11*((((x48*x84))+x83))))+((x5*((((x49*x86))+((x48*x74))+((x41*x71))+x55)))));
eerot[1]=(((x11*((((x30*x85))+((x13*x71))+(((-1.0)*x55))+((x22*x74))))))+((x5*((((x48*x87))+x83))))+((x5*((((x14*x85))+x93))))+((x11*((((x20*x87))+x82)))));
IkReal x96=((1.0)*x19);
eerot[2]=(((x10*(((((-1.0)*x16*x68))+((x24*x6))))))+((x9*(((((-1.0)*x40*x96))+(((-1.0)*x42*x96))))))+((x23*x8))+((x6*((((x26*x47))+(((-1.0)*x26*x43)))))));
IkReal x97=((1.0)*x0);
IkReal x98=((1.0)*x18);
IkReal x99=((1.0)*x43);
eetrans[0]=((0.0665)+(((-6.3e-7)*x8))+((x31*x7))+((x9*(((((-1.0)*x40*x98))+(((-1.0)*x42*x98))))))+((x27*x47))+((x29*x40))+((x29*x42))+((x7*((((x35*x43))+(((-1.0)*x35*x47))))))+(((-1.0)*x27*x99))+((x33*x6))+(((-1.0)*x32*x97))+((x10*(((((-0.256350109993286)*x77))+((x17*x6))))))+((x10*((((x27*x40))+((x27*x42))))))+(((-0.046)*x0))+(((-1.0)*x15*x97))+((x9*(((((-1.0)*x37*x68))+((x21*x6))))))+((x6*(((((-1.0)*x38*x99))+((x38*x47)))))));
eerot[3]=(((x5*((((x14*x75))+((x20*x89))))))+((x11*(((((-0.825384895380634)*x6*x72))+((x45*x88))+((x53*x76))+(((-0.825384895346427)*x46))))))+((x5*((((x30*x88))+((x13*x72))+(((0.564570433560846)*x46))+((x22*x76))))))+((x11*x95)));
eerot[4]=(((x5*(((((-1.0)*x14*x88))+(((-1.0)*x20*x76))+(((-1.0)*x12*x72))+(((-0.825384895346427)*x46))))))+((x11*((((x45*x75))+((x53*x89))))))+((x11*((((x49*x88))+((x48*x76))+((x41*x72))+(((-0.564570433560846)*x46))))))+((x5*x95)));
eerot[5]=(((x0*x23))+((x6*((((x36*x43))+(((-1.0)*x36*x47))))))+((x10*((((x19*x6))+((x16*x69))))))+((x9*((((x24*x42))+((x24*x40)))))));
IkReal x100=((1.0)*x47);
IkReal x101=((1.0)*x42);
IkReal x102=((1.0)*x40);
eetrans[1]=(((x6*(((((-1.0)*x100*x31))+((x31*x43))))))+(((-6.3e-7)*x0))+(((-1.0)*x102*x25))+(((-1.0)*x101*x25))+((x10*(((((-1.0)*x102*x21))+(((-1.0)*x101*x21))))))+((x32*x8))+(((-1.0)*x100*x21))+((x9*((((x17*x40))+((x17*x42))))))+((x35*x6))+((x21*x43))+((x7*((((x33*x47))+(((-1.0)*x33*x43))))))+(((0.046)*x8))+((x38*x7))+((x10*((((x18*x6))+(((0.256350109993286)*x78))))))+((x9*((((x27*x6))+((x37*x69))))))+((x15*x8)));
eerot[6]=(((x5*((((x13*x65))+((x30*x64*x7))+((x22*x62))))))+((x5*x91))+((x11*x94))+((x11*x92)));
eerot[7]=(((x11*(((((-0.564570433584244)*x44*x64))+((x48*x62))+((x41*x65))))))+(((-1.0)*x11*x91))+((x5*x94))+((x5*x92)));
eerot[8]=(((x6*x64))+((x44*x66))+((x9*(((((0.999999999958557)*x43))+(((-0.999999999958557)*x47)))))));
eetrans[2]=((0.1442)+(((-0.15775011)*x43))+((x7*(((((0.042)*x42))+(((0.042)*x40))))))+((x10*(((((0.04079975)*x47))+(((-0.04079975)*x43))))))+((x44*(((((0.256350109993286)*x42))+(((0.256350109993286)*x40))))))+(((-0.29035)*x1))+((x6*(((((-1.58487368619693e-6)*x42))+(((-1.58487368619693e-6)*x40))))))+((x67*x7*x9))+((x9*(((((0.256350109993286)*x43))+(((-0.256350109993286)*x47))))))+(((0.15775011)*x47))+(((0.004)*x4))+(((-1.0)*x67)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((0.825384895380634)*r01))+(((-0.564570433584244)*r00)));
new_r01=((((0.825384895380634)*r00))+(((0.564570433584244)*r01)));
new_r02=((-1.0)*r02);
new_px=((-0.0665)+(((-0.25635010999609)*r02))+px);
new_r10=((((0.564570433584244)*r10))+(((-0.825384895380634)*r11)));
new_r11=((((-0.564570433584244)*r11))+(((-0.825384895380634)*r10)));
new_r12=r12;
new_py=((((-1.0)*py))+(((0.25635010999609)*r12)));
new_r20=((((-0.825384895380634)*r21))+(((0.564570433584244)*r20)));
new_r21=((((-0.825384895380634)*r20))+(((-0.564570433584244)*r21)));
new_r22=r22;
new_pz=((0.1442)+(((0.25635010999609)*r22))+(((-1.0)*pz)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x103=((1.0)*px);
IkReal x104=((1.0)*pz);
IkReal x105=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x105))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x104)));
rxp0_2=((((-1.0)*r10*x103))+((py*r00)));
rxp1_0=((((-1.0)*r21*x105))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x104)));
rxp1_2=((((-1.0)*r11*x103))+((py*r01)));
rxp2_0=((((-1.0)*r22*x105))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x104)));
rxp2_2=((((-1.0)*r12*x103))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x106=((3.8237465938439e-7)*npz);
IkReal x107=((1.91187329692195e-8)*r02);
IkReal x108=((0.0121946999994946)*r21);
IkReal x109=((2.81755248650594e-13)*r12);
IkReal x110=((0.0419999999982594)*npy);
IkReal x111=((0.00209999999991297)*r01);
IkReal x112=((1.11022482352258e-7)*r22);
IkReal x113=((4.09812989727538e-9)*r11);
IkReal x114=((0.04079975)*py);
IkReal x115=((0.0016646196000625)*r10);
IkReal x116=((0.00176399999992689)*r21);
IkReal x117=((1.02550628372429e-7)*r11);
IkReal x118=((0.15775011)*py);
IkReal x119=((0.0419999999982594)*rxp1_1);
IkReal x120=((0.00643616505080095)*r10);
IkReal x121=((1.11022482352258e-7)*r02);
IkReal x122=((3.8237465938439e-7)*rxp2_1);
IkReal x123=((0.001713589499771)*r12);
IkReal x124=((1.60597356941444e-8)*r22);
IkReal x125=((0.0121946999994946)*r01);
IkReal x126=((0.0839999999965188)*rxp0_1);
IkReal x127=((0.0243893999989892)*r00);
IkReal x128=((2.05101256744858e-7)*r10);
IkReal x129=((0.0128723301016019)*r11);
IkReal x130=((0.0243893999989892)*r20);
IkReal x131=((8.19625979455076e-9)*r10);
IkReal x132=((0.0839999999965188)*npx);
IkReal x133=((0.003329239200125)*r11);
IkReal x134=((1.91187329692195e-8)*r22);
IkReal x135=((0.00209999999991297)*r21);
IkReal x136=((1.60597356941444e-8)*r02);
IkReal x137=((0.00176399999992689)*r01);
IkReal x138=((2.02352669746219e-14)*rxp2_2);
IkReal x139=((1.31046640277433e-9)*rxp1_0);
IkReal x140=((8.0107364364012e-15)*r10);
IkReal x141=((0.000103164478564814)*r01);
IkReal x142=((0.000143941517994035)*rxp2_0);
IkReal x143=((7.39245302958289e-5)*r21);
IkReal x144=((1.60597356941444e-9)*npz);
IkReal x145=((0.00102435479995755)*rxp1_1);
IkReal x146=((9.32588851758963e-9)*rxp2_1);
IkReal x147=((5.82337488732195e-10)*r22);
IkReal x148=((4.17934197505797e-5)*r12);
IkReal x149=((2.69361920050133e-10)*r11);
IkReal x150=((2.75899308985748e-14)*rxp0_0);
IkReal x151=((2.22263999990789e-9)*rxp1_2);
IkReal x152=((1.73816564661021e-20)*r20);
IkReal x153=((9.3922577034028e-10)*r02);
IkReal x154=((0.000176399999992689)*npy);
IkReal x155=((2.6423956585013e-9)*px);
IkReal x156=((1.07809082267939e-10)*r00);
IkReal x157=((1.31046640277433e-9)*rxp1_2);
IkReal x158=((4.27616247319922e-5)*r10);
IkReal x159=((0.000111278878564478)*r21);
IkReal x160=((1.73816564661021e-20)*r00);
IkReal x161=((0.000143941517994035)*rxp2_2);
IkReal x162=((1.53346616923072e-10)*r02);
IkReal x163=((2.22263999990789e-9)*rxp1_0);
IkReal x164=((7.24711875506478e-10)*r11);
IkReal x165=((0.00104808545961)*py);
IkReal x166=((0.000162287999993274)*rxp1_1);
IkReal x167=((2.02352669746219e-14)*rxp2_0);
IkReal x168=((1.07809082267939e-10)*r20);
IkReal x169=((1.01310055453334e-9)*r22);
IkReal x170=((2.75899308985748e-14)*rxp0_2);
IkReal x171=((6.62130982667598e-6)*r12);
IkReal x172=((2.68042094977817e-5)*r01);
IkReal x173=((1.47749568386128e-9)*rxp2_1);
IkReal x174=((2.6423956585013e-9)*pz);
IkReal x175=((3.47633129322043e-20)*r01);
IkReal x176=((2.15618164535877e-10)*r21);
IkReal x177=((2.62093280554867e-9)*rxp0_2);
IkReal x178=((5.51798617971496e-14)*rxp1_2);
IkReal x179=((4.44527999981577e-9)*rxp0_0);
IkReal x180=((2.62093280554867e-9)*rxp0_0);
IkReal x181=((3.47633129322043e-20)*r21);
IkReal x182=((5.51798617971496e-14)*rxp1_0);
IkReal x183=((2.15618164535877e-10)*r01);
IkReal x184=((4.44527999981577e-9)*rxp0_2);
IkReal x185=((1.37949654492874e-15)*r10);
IkReal x186=((2.85109496999259e-5)*r01);
IkReal x187=((0.00102435479995755)*npy);
IkReal x188=((0.000176399999992689)*rxp1_1);
IkReal x189=((1.68824728227115e-9)*r22);
IkReal x190=((7.10866844111972e-10)*r11);
IkReal x191=((9.32588851758963e-9)*npz);
IkReal x192=((7.19707589382642e-6)*r12);
IkReal x193=((1.60597356941444e-9)*rxp2_1);
IkReal x194=((0.000185436937603225)*r21);
IkReal x195=((3.50251363026768e-10)*r02);
IkReal x196=((0.000162287999993274)*npy);
IkReal x197=((7.8739508782355e-11)*r22);
IkReal x198=((0.000193551337602889)*r01);
IkReal x199=((0.003833721816834)*py);
IkReal x200=((0.000156414891696373)*r10);
IkReal x201=((2.9736161240227e-9)*r11);
IkReal x202=((1.47749568386128e-9)*npz);
IkReal x203=((2.90848696029845e-15)*r12);
IkReal x204=((1.76212206646421e-9)*r02);
IkReal x205=((1.86093710981213e-5)*r21);
IkReal x206=((3.8237465938439e-8)*r12);
IkReal x207=((0.0815995)*px);
IkReal x208=((8.19625979455076e-9)*r01);
IkReal x209=((5.63510497301188e-13)*r02);
IkReal x210=((0.003329239200125)*r00);
IkReal x211=((0.00419999999982594)*r11);
IkReal x212=((2.22044964704515e-7)*r12);
IkReal x213=((0.00342717899954201)*r02);
IkReal x214=((7.64749318768779e-7)*rxp2_0);
IkReal x215=((0.0839999999965188)*rxp1_0);
IkReal x216=((0.0243893999989892)*r11);
IkReal x217=((0.0128723301016019)*r00);
IkReal x218=((2.05101256744858e-7)*r01);
IkReal x219=((0.31550022)*px);
IkReal x220=((0.0257446602032038)*r01);
IkReal x221=((0.0487787999979785)*r10);
IkReal x222=((4.10202513489717e-7)*r00);
IkReal x223=((0.167999999993038)*rxp0_0);
IkReal x224=((0.00665847840025)*r01);
IkReal x225=((1.63925195891015e-8)*r00);
IkReal x226=((3.21194713882887e-8)*r12);
IkReal x227=((0.00352799999985379)*r11);
IkReal x228=((1.86517770351793e-8)*rxp2_0);
IkReal x229=((0.000287883035988069)*rxp2_1);
IkReal x230=((0.000206328957129629)*r11);
IkReal x231=((2.62093280554867e-9)*rxp1_1);
IkReal x232=((5.38723840100267e-10)*r01);
IkReal x233=((8.35868395011594e-5)*r02);
IkReal x234=((0.0020487095999151)*rxp1_0);
IkReal x235=((1.87845154068056e-9)*r12);
IkReal x236=((5.51798617971496e-14)*rxp0_1);
IkReal x237=((5.28479131700261e-9)*py);
IkReal x238=((1.60214728728024e-14)*r00);
IkReal x239=((2.15618164535877e-10)*r10);
IkReal x240=((4.44527999981577e-9)*rxp1_1);
IkReal x241=((2.95499136772256e-9)*rxp2_0);
IkReal x242=((3.06693233846144e-10)*r12);
IkReal x243=((1.3242619653352e-5)*r02);
IkReal x244=((3.47633129322043e-20)*r10);
IkReal x245=((0.00209617091922)*px);
IkReal x246=((0.000324575999986549)*rxp1_0);
IkReal x247=((4.04705339492438e-14)*rxp2_1);
IkReal x248=((1.44942375101296e-9)*r01);
IkReal x249=((8.55232494639845e-5)*r00);
IkReal x250=((5.36084189955635e-5)*r11);
IkReal x251=((6.95266258644086e-20)*r11);
IkReal x252=((8.89055999963155e-9)*rxp0_1);
IkReal x253=((1.10359723594299e-13)*rxp1_1);
IkReal x254=((5.24186561109733e-9)*rxp0_1);
IkReal x255=((4.31236329071754e-10)*r11);
IkReal x256=((1.43941517876528e-5)*r02);
IkReal x257=((1.42173368822394e-9)*r01);
IkReal x258=((3.21194713882887e-9)*rxp2_0);
IkReal x259=((5.70218993998517e-5)*r11);
IkReal x260=((7.00502726053536e-10)*r12);
IkReal x261=((2.75899308985748e-15)*r00);
IkReal x262=((0.000352799999985379)*rxp1_0);
IkReal x263=((0.000312829783392746)*r00);
IkReal x264=((0.000387102675205778)*r11);
IkReal x265=((5.9472322480454e-9)*r01);
IkReal x266=((0.007667443633668)*px);
IkReal x267=((5.8169739205969e-15)*r02);
IkReal x268=((3.52424413292842e-9)*r12);
IkReal x269=((0.00419999999982594)*r00);
IkReal x270=((0.00352799999985379)*r20);
IkReal x271=((0.00419999999982594)*r20);
IkReal x272=((0.00352799999985379)*r00);
IkReal x273=((0.000206328957129629)*r00);
IkReal x274=((0.000352799999985379)*npx);
IkReal x275=((0.0020487095999151)*rxp0_1);
IkReal x276=((0.000147849060591658)*r20);
IkReal x277=((5.38723840100267e-10)*r10);
IkReal x278=((1.60214728728024e-14)*r11);
IkReal x279=((1.44942375101296e-9)*r10);
IkReal x280=((0.000324575999986549)*rxp0_1);
IkReal x281=((8.55232494639845e-5)*r11);
IkReal x282=((0.000222557757128956)*r20);
IkReal x283=((5.36084189955635e-5)*r00);
IkReal x284=((0.000352799999985379)*rxp0_1);
IkReal x285=((0.00037087387520645)*r20);
IkReal x286=((5.70218993998517e-5)*r00);
IkReal x287=((1.42173368822394e-9)*r10);
IkReal x288=((2.75899308985748e-15)*r11);
IkReal x289=((0.0020487095999151)*npx);
IkReal x290=((0.000312829783392746)*r11);
IkReal x291=((3.72187421962427e-5)*r20);
IkReal x292=((0.000387102675205778)*r00);
IkReal x293=((0.000324575999986549)*npx);
IkReal x294=((5.9472322480454e-9)*r10);
IkReal x295=((0.00352799999985379)*npy);
IkReal x296=((3.21194713882887e-8)*npz);
IkReal x297=((0.00705599999970758)*r10);
IkReal x298=((0.00705599999970758)*npx);
IkReal x299=(pp*x137);
IkReal x300=(px*x296);
IkReal x301=(px*x295);
IkReal x302=(pp*x136);
IkReal x303=(pz*x296);
IkReal x304=(pp*x116);
IkReal x305=(pz*x295);
IkReal x306=(pp*x124);
IkReal x307=(pz*x298);
IkReal x308=(pp*x270);
IkReal x309=(pp*x272);
IkReal x310=(px*x298);
IkReal x311=((6.42389427765775e-8)*npz*py);
IkReal x312=(pp*x227);
IkReal x313=((0.00705599999970758)*npy*py);
IkReal x314=(pp*x226);
IkReal x315=(pp*x297);
IkReal x316=((0.0141119999994152)*npx*py);
IkReal x317=((-5.75324867263456e-9)+x106);
IkReal x318=((9.93825693e-8)+x134);
IkReal x319=((-9.93825693e-8)+x125);
IkReal x320=((2.53679494489648e-9)+x197);
IkReal x321=(x210+x208);
IkReal x322=(x162+x165);
IkReal x323=(x232+x230);
IkReal x324=(x207+x209);
IkReal x325=(x213+x214);
IkReal x326=(x114+x109);
IkReal x327=(x163+x160);
IkReal x328=(x136+x112);
IkReal x329=(x126+x128);
IkReal x330=(x261+x262);
IkReal x331=(x258+x256);
IkReal x332=(x275+x273);
IkReal x333=(x184+x274);
IkReal x334=(x152+x151);
IkReal x335=(x198+x196);
IkReal x336=(x112+x108);
IkReal x337=(x201+x200);
IkReal x338=(x127+x129);
IkReal x339=(x212+x219);
IkReal x340=(x112+x110);
IkReal x341=(x181+x291);
IkReal x342=(x223+x222);
IkReal x343=(x143+x147);
IkReal x344=(x228+x233);
IkReal x345=(x135+x118);
IkReal x346=(x138+x202);
IkReal x347=(x198+x205);
IkReal x348=(x130+x132);
IkReal x349=(x191+x190);
IkReal x350=(x260+x247);
IkReal x351=(x131+x269);
IkReal x352=(x184+x293);
IkReal x353=(x154+x147);
IkReal x354=(x131+x272);
IkReal x355=(x247+x245);
IkReal x356=(x240+x244);
IkReal x357=(x181+x276);
IkReal x358=(x121+x118);
IkReal x359=(x259+x257);
IkReal x360=(x124+x125);
IkReal x361=(x122+x123);
IkReal x362=(x174+x306);
IkReal x363=(x312+x231);
IkReal x364=(x307+x285);
IkReal x365=(x139+x299);
IkReal x366=(x155+x302);
IkReal x367=(x311+x229);
IkReal x368=(x142+x300);
IkReal x369=(x179+x286+x284);
IkReal x370=((-6.602938395543e-10)+x161+x303);
IkReal x371=(x171+x173+x167);
IkReal x372=(x215+x217+x218);
IkReal x373=(x121+x361);
IkReal x374=(x113+x111+x115);
IkReal x375=(x179+x279+x280);
IkReal x376=(x185+x186+x188);
IkReal x377=(x175+x288+x287);
IkReal x378=(x153+x146+x148);
IkReal x379=(x140+x141+x145);
IkReal x380=(x116+x361);
IkReal x381=(x175+x283+x281);
IkReal x382=(x243+x242+x241);
IkReal x383=(x137+x113+x115);
IkReal x384=(x314+x237+x235);
IkReal x385=(x156+x150+x301);
IkReal x386=(x310+x290+x292);
IkReal x387=((-1.32119782925065e-10)+x154+x144+x138);
IkReal x388=(x149+x368);
IkReal x389=(x157+x187+x304);
IkReal x390=(x310+x277+x278);
IkReal x391=((-9.93825693e-8)+x120+x117+x119);
IkReal x392=((-1.32119782925065e-10)+x143+x144+x138);
IkReal x393=(x320+x366);
IkReal x394=((7.67219579445853e-10)+x161+x189+x303);
IkReal x395=(x125+x120+x117+x119);
IkReal x396=(x124+x120+x117+x119);
IkReal x397=(x250+x246+x249+x248);
IkReal x398=(x167+x193+x192+x195);
IkReal x399=(x315+x254+x255+x253);
IkReal x400=(x180+x182+x183+x309);
IkReal x401=(x170+x168+x194+x305);
IkReal x402=(x314+x237+x267+x266);
IkReal x403=(x172+x157+x159+x304);
IkReal x404=(x170+x172+x168+x305);
IkReal x405=(x110+x108+x383);
IkReal x406=(x178+x177+x176+x308+x289);
IkReal x407=(x313+x238+x239+x236+x234);
IkReal x408=(x178+x177+x176+x308+x282);
IkReal x409=(x199+x368+x204+x203);
IkReal x410=(x166+x164+x157+x159+x158+x304);
IkReal x411=(x313+x239+x236+x265+x264+x263);
IkReal x412=(x170+x168+x166+x164+x158+x305+x327);
op[0]=((((-1.0)*x326))+x110+x107+x317+x374+(((-1.0)*x336)));
op[1]=((((-1.0)*x396))+x358+x319+(((-1.0)*x380)));
op[2]=(x132+x351+(((-1.0)*x133))+(((-1.0)*x130)));
op[3]=((((-1.0)*x329))+x338+(((-1.0)*x270)));
op[4]=((((-1.0)*x374))+(((-1.0)*x326))+x108+x107+x317+(((-1.0)*x340)));
op[5]=((((-1.0)*x361))+(((-1.0)*x360))+x116+x358+x391);
op[6]=((((-1.0)*x118))+x135+x318+x373+x395);
op[7]=((((-1.0)*x326))+x328+x317+x405);
op[8]=((((-1.0)*x129))+x127+x329+x271);
op[9]=(x354+x348+(((-1.0)*x133)));
op[10]=((((-1.0)*x395))+x318+x373+(((-1.0)*x345)));
op[11]=((((-1.0)*x326))+x328+x317+(((-1.0)*x405)));
op[12]=((((-1.0)*x366))+(((-1.0)*x365))+(((-1.0)*x379))+(((-1.0)*x378))+x334+x387+x385+x388+(((-1.0)*x343)));
op[13]=((((-1.0)*x169))+(((-1.0)*x362))+(((-1.0)*x371))+(((-1.0)*x327))+x322+x370+x404+(((-1.0)*x410)));
op[14]=((((-1.0)*x357))+x333+x390+(((-1.0)*x332))+(((-1.0)*x400)));
op[15]=((((-1.0)*x375))+x307+x381+(((-1.0)*x408)));
op[16]=((((-1.0)*x149))+(((-1.0)*x366))+(((-1.0)*x353))+(((-1.0)*x378))+x379+x368+x365+x392+(((-1.0)*x385))+(((-1.0)*x334)));
op[17]=((((-1.0)*x169))+(((-1.0)*x362))+(((-1.0)*x371))+x327+x322+x370+x410+(((-1.0)*x404)));
op[18]=((((-1.0)*x398))+(((-1.0)*x362))+(((-1.0)*x376))+(((-1.0)*x191))+(((-1.0)*x327))+x190+x394+x401+(((-1.0)*x389)));
op[19]=(x337+x365+x393+x205+(((-1.0)*x385))+(((-1.0)*x334))+(((-1.0)*x335))+(((-1.0)*x346))+(((-1.0)*x409)));
op[20]=((((-1.0)*x369))+x377+x364+(((-1.0)*x406)));
op[21]=((((-1.0)*x352))+x341+x294+x400+(((-1.0)*x386)));
op[22]=((((-1.0)*x398))+(((-1.0)*x362))+x327+x389+x376+x394+(((-1.0)*x349))+(((-1.0)*x401)));
op[23]=((((-1.0)*x365))+(((-1.0)*x205))+x335+x334+x385+x393+(((-1.0)*x337))+(((-1.0)*x346))+(((-1.0)*x409)));
op[24]=((((-1.0)*x321))+x324+x211+x206);
op[25]=(x325+x372+x212+x216+(((-1.0)*x219)));
op[26]=(x224+(((0.00839999999965188)*r10))+(((-1.0)*x225)));
op[27]=(x342+x221+(((-1.0)*x220)));
op[28]=(x324+x321+x206+(((-1.0)*x211)));
op[29]=((((-1.0)*x372))+x325+x212+(((-1.0)*x219))+(((-1.0)*x216)));
op[30]=((((-1.0)*x372))+(((-1.0)*x325))+x339+x216);
op[31]=((((-1.0)*x321))+x324+x227+x226);
op[32]=(x221+x220+(((-1.0)*x342)));
op[33]=(x224+x297+(((-1.0)*x225)));
op[34]=((((-1.0)*x325))+x339+x372+(((-1.0)*x216)));
op[35]=(x324+x321+x226+(((-1.0)*x227)));
op[36]=((((-1.0)*x363))+(((-1.0)*x323))+x344+x367+x407+(((-1.0)*x384)));
op[37]=((((-1.0)*x356))+(((-1.0)*x355))+x382+x397);
op[38]=((((-1.0)*x399))+(((-1.07744768020053e-9)*r00))+x316+(((-0.000412657914259257)*r10))+(((-3.20429457456048e-14)*r01))+(((0.00409741919983019)*rxp0_0)));
op[39]=((((0.000649151999973097)*rxp0_0))+(((-0.000171046498927969)*r01))+(((2.89884750202591e-9)*r00))+x251+(((0.000107216837991127)*r10))+(((-1.0)*x252)));
op[40]=(x323+x344+x363+x367+(((-1.0)*x384))+(((-1.0)*x407)));
op[41]=((((-1.0)*x397))+(((-1.0)*x355))+x356+x382);
op[42]=((((-1.0)*x350))+(((-1.0)*x359))+(((-1.0)*x356))+x331+x330);
op[43]=((((-1.0)*x367))+x363+x402+(((-1.0)*x268))+(((-1.0)*x411)));
op[44]=((((-0.000114043798799703)*r10))+(((-2.84346737644789e-9)*r00))+x251+(((0.000705599999970758)*rxp0_0))+(((-5.51798617971496e-15)*r01))+(((-1.0)*x252)));
op[45]=((((-1.18944644960908e-8)*r00))+(((0.000625659566785492)*r01))+(((-0.000774205350411556)*r10))+x399+(((-1.0)*x316)));
op[46]=((((-1.0)*x350))+x331+x356+x359+(((-1.0)*x330)));
op[47]=((((-1.0)*x367))+(((-1.0)*x363))+x402+x411+(((-1.0)*x268)));
op[48]=((((-1.0)*x374))+(((-1.0)*x107))+x110+x326+x317+(((-1.0)*x336)));
op[49]=((((-1.0)*x360))+(((-1.0)*x358))+(((-1.0)*x116))+x361+x391);
op[50]=((((-1.0)*x351))+x133+x132+(((-1.0)*x130)));
op[51]=(x329+(((-1.0)*x338))+(((-1.0)*x270)));
op[52]=((((-1.0)*x107))+x108+x326+x317+x374+(((-1.0)*x340)));
op[53]=((((-1.0)*x396))+(((-1.0)*x358))+x319+x380);
op[54]=((((-1.0)*x395))+(((-1.0)*x373))+x318+x345);
op[55]=(x110+x336+x326+x317+(((-1.0)*x136))+(((-1.0)*x383)));
op[56]=((((-1.0)*x329))+(((-1.0)*x127))+x129+x271);
op[57]=((((-1.0)*x354))+x133+x348);
op[58]=((((-1.0)*x373))+x118+x318+x395+(((-1.0)*x135)));
op[59]=((((-1.0)*x108))+(((-1.0)*x110))+x112+x326+x317+x383+(((-1.0)*x136)));
op[60]=(x334+x387+x379+x378+x365+x366+(((-1.0)*x385))+(((-1.0)*x388))+(((-1.0)*x343)));
op[61]=((((-1.0)*x169))+(((-1.0)*x362))+(((-1.0)*x322))+x371+x370+x412+(((-1.0)*x403)));
op[62]=((((-1.0)*x390))+(((-1.0)*x357))+x333+x332+x400);
op[63]=(x307+x375+(((-1.0)*x381))+(((-1.0)*x408)));
op[64]=((((-1.0)*x365))+(((-1.0)*x368))+(((-1.0)*x353))+(((-1.0)*x379))+x149+x385+x378+x366+x392+(((-1.0)*x334)));
op[65]=((((-1.0)*x169))+(((-1.0)*x362))+(((-1.0)*x322))+x371+x370+x403+(((-1.0)*x412)));
op[66]=((((-1.0)*x362))+x327+x376+x394+x398+x401+(((-1.0)*x389))+(((-1.0)*x349)));
op[67]=((((-1.0)*x366))+(((-1.0)*x365))+(((-1.0)*x196))+x320+x385+x347+x409+(((-1.0)*x334))+(((-1.0)*x337))+(((-1.0)*x346)));
op[68]=((((-1.0)*x377))+x369+x364+(((-1.0)*x406)));
op[69]=((((-1.0)*x352))+(((-1.0)*x294))+x386+x341+(((-1.0)*x400)));
op[70]=((((-1.0)*x362))+(((-1.0)*x376))+(((-1.0)*x191))+(((-1.0)*x327))+x190+x389+x394+x398+(((-1.0)*x401)));
op[71]=((((-1.0)*x366))+x196+x337+x334+x320+x365+x409+(((-1.0)*x385))+(((-1.0)*x347))+(((-1.0)*x346)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j0array[16], cj0array[16], sj0array[16], j5array[16], cj5array[16], sj5array[16], j1array[16], cj1array[16], sj1array[16];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ij0 += 3)
{
IkReal htj0 = zeror[ij0+0], htj5 = zeror[ij0+1], htj1 = zeror[ij0+2];
if(isnan(htj0)||isnan(htj5)||isnan(htj1)){
continue;
}
j0array[numsolutions]=((2.0)*(atan(htj0)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x413=htj0*htj0;
CheckValue<IkReal> x414=IKPowWithIntegerCheck(((1.0)+x413),-1);
if(!x414.valid){
continue;
}
cj0array[numsolutions]=((x414.value)*(((1.0)+(((-1.0)*x413)))));
CheckValue<IkReal> x415=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x415.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x415.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x416=htj5*htj5;
CheckValue<IkReal> x417=IKPowWithIntegerCheck(((1.0)+x416),-1);
if(!x417.valid){
continue;
}
cj5array[numsolutions]=((x417.value)*(((1.0)+(((-1.0)*x416)))));
CheckValue<IkReal> x418=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x418.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x418.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x419=htj1*htj1;
CheckValue<IkReal> x420=IKPowWithIntegerCheck(((1.0)+x419),-1);
if(!x420.valid){
continue;
}
cj1array[numsolutions]=((x420.value)*(((1.0)+(((-1.0)*x419)))));
CheckValue<IkReal> x421=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x421.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x421.value));
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j0valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj0 = 16;
_nj5 = 1;
_nj1 = 1;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( !j0valid[iij0] ) { continue; }
if( IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij0]-cj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij0]-sj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij0]-cj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij0]-sj1array[iij0]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j0valid[iij0]=false; _ij0[1] = iij0; _ij5[1] = 0; _ij1[1] = 0;  break; 
}
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

    j5 = j5array[ij0]; cj5 = cj5array[ij0]; sj5 = sj5array[ij0];

    j1 = j1array[ij0]; cj1 = cj1array[ij0]; sj1 = sj1array[ij0];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x422=((1.78328181260324e-5)*cj0);
IkReal x423=(r10*sj5);
IkReal x424=(cj5*r11);
IkReal x425=((0.971422619047619)*sj0);
IkReal x426=((0.971422619047619)*cj0);
IkReal x427=(cj0*r12);
IkReal x428=((0.999999999958557)*cj0);
IkReal x429=(r02*sj0);
IkReal x430=(cj5*r01*sj0);
IkReal x431=(r00*sj0*sj5);
if( IKabs(((1.5e-5)+(((-1.0)*cj5*r00*x425))+(((2.38442247915436e-11)*x429))+((cj5*r10*x426))+(((-1.0)*r11*sj5*x426))+(((-2.38442247915436e-11)*x427))+(((-23.8095238095238)*cj0*py))+((r01*sj5*x425))+(((-1.78328181260324e-5)*x430))+(((-1.78328181260324e-5)*x431))+(((23.8095238095238)*px*sj0))+((x422*x423))+((x422*x424)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.999999999958557)*x430))+(((-0.999999999958557)*x431))+(((-9.10415855677118e-6)*x429))+((x424*x428))+(((9.10415855677118e-6)*x427))+((x423*x428)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.5e-5)+(((-1.0)*cj5*r00*x425))+(((2.38442247915436e-11)*x429))+((cj5*r10*x426))+(((-1.0)*r11*sj5*x426))+(((-2.38442247915436e-11)*x427))+(((-23.8095238095238)*cj0*py))+((r01*sj5*x425))+(((-1.78328181260324e-5)*x430))+(((-1.78328181260324e-5)*x431))+(((23.8095238095238)*px*sj0))+((x422*x423))+((x422*x424))))+IKsqr(((((-0.999999999958557)*x430))+(((-0.999999999958557)*x431))+(((-9.10415855677118e-6)*x429))+((x424*x428))+(((9.10415855677118e-6)*x427))+((x423*x428))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((1.5e-5)+(((-1.0)*cj5*r00*x425))+(((2.38442247915436e-11)*x429))+((cj5*r10*x426))+(((-1.0)*r11*sj5*x426))+(((-2.38442247915436e-11)*x427))+(((-23.8095238095238)*cj0*py))+((r01*sj5*x425))+(((-1.78328181260324e-5)*x430))+(((-1.78328181260324e-5)*x431))+(((23.8095238095238)*px*sj0))+((x422*x423))+((x422*x424))), ((((-0.999999999958557)*x430))+(((-0.999999999958557)*x431))+(((-9.10415855677118e-6)*x429))+((x424*x428))+(((9.10415855677118e-6)*x427))+((x423*x428))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x432=IKcos(j3);
IkReal x433=((0.04079975)*sj0);
IkReal x434=((8.58978361288802e-7)*cj0);
IkReal x435=(cj5*r11);
IkReal x436=(r10*sj5);
IkReal x437=((0.999999999958557)*cj0);
IkReal x438=((8.58978361288802e-7)*sj0);
IkReal x439=(r00*sj5);
IkReal x440=(cj5*r01);
IkReal x441=((0.999999999958557)*sj0);
IkReal x442=((0.04079975)*cj0);
evalcond[0]=(((x439*x441))+(((9.10415855677118e-6)*r02*sj0))+(((-1.0)*x435*x437))+(((-1.0)*x436*x437))+((x440*x441))+x432+(((-9.10415855677118e-6)*cj0*r12)));
evalcond[1]=((-6.3e-7)+(((-1.0)*r01*sj5*x433))+(((-1.0)*cj5*r10*x442))+(((-1.0)*x434*x435))+(((-1.0)*x434*x436))+((cj5*r00*x433))+((r11*sj5*x442))+(((0.042)*(IKsin(j3))))+((x438*x440))+(((-1.0)*px*sj0))+((cj0*py))+((x438*x439))+(((1.1e-7)*x432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x443=cj3*cj3;
IkReal x444=(cj3*sj3);
j2eval[0]=((-1.0)+(((381818.181818182)*x444))+x443+(((-370906.818181818)*sj3)));
j2eval[1]=IKsign(((-1.1e-7)+(((0.042)*x444))+(((-0.04079975)*sj3))+(((1.1e-7)*x443))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x445=cj0*cj0;
IkReal x446=r01*r01;
IkReal x447=cj5*cj5;
IkReal x448=r00*r00;
IkReal x449=r02*r02;
IkReal x450=r11*r11;
IkReal x451=r10*r10;
IkReal x452=r12*r12;
IkReal x453=((1.99999999983423)*r10);
IkReal x454=(cj5*sj0);
IkReal x455=((1.0)*sj3);
IkReal x456=((1.82083171127878e-5)*r01);
IkReal x457=(cj0*r12);
IkReal x458=(cj5*r02);
IkReal x459=((219679.829546644)*r12);
IkReal x460=((1.99999999983423)*r11);
IkReal x461=(r10*sj5);
IkReal x462=(cj0*sj0);
IkReal x463=((219679.829546644)*r02);
IkReal x464=(r00*sj5);
IkReal x465=(r01*r11);
IkReal x466=((1.82083171127878e-5)*r02);
IkReal x467=(cj0*r11);
IkReal x468=((24129613754.8213)*r01);
IkReal x469=((219679.829546644)*r01);
IkReal x470=((1.99999999983423)*r01);
IkReal x471=(r01*sj5);
IkReal x472=(r00*r10);
IkReal x473=((1.82083171127878e-5)*r12);
IkReal x474=(r02*sj0);
IkReal x475=((8.28857030268299e-11)*x448);
IkReal x476=((12064806877.4106)*x449);
IkReal x477=((0.999999999917114)*x447);
IkReal x478=((12064806877.4106)*x447);
IkReal x479=((219679.829546644)*x464);
IkReal x480=(r02*x445);
IkReal x481=((12064806878.4106)*x446);
IkReal x482=(cj5*x445);
IkReal x483=((0.999999999917114)*x449);
IkReal x484=(r11*x482);
IkReal x485=(x445*x448);
IkReal x486=(x447*x462);
IkReal x487=(x445*x452);
IkReal x488=(x445*x450);
IkReal x489=(x445*x446);
IkReal x490=(x445*x451);
j4eval[0]=(((cj5*x464*x468))+((x459*x484))+(((24129613754.8213)*x461*x484))+(((24129613754.8213)*x457*x474))+((x445*x459*x461))+(((-1.0)*x481))+(((-1.0)*x454*x463*x467))+(((24129613756.8213)*x462*x465))+(((-24129613754.8213)*x454*x464*x467))+(((-1.0)*x448))+((x445*x481))+((x463*x464))+(((-1.0)*x476))+(((-24129613754.8213)*x465*x486))+((x446*x478))+(((-1.0)*sj0*x457*x479))+(((-1.0)*x445*x463*x464))+(((-1.0)*x490))+(((-1.0)*x454*x457*x469))+((x478*x485))+((x478*x488))+x485+(((24129613754.8213)*x472*x486))+(((-12064806878.4106)*x488))+(((-1.0)*x445*x458*x469))+(((-1.0)*x464*x468*x482))+(((-1.0)*x448*x478))+(((-12064806877.4106)*x487))+(((-1.0)*x461*x462*x463))+((x458*x469))+(((2.0)*x462*x472))+(((-1.0)*x478*x490))+(((-1.0)*cj0*x454*x461*x468))+((x445*x476))+(((-1.0)*x478*x489)));
j4eval[1]=IKsign(((((-1.0)*cj0*x454*x460*x464))+((x445*x461*x473))+(((-1.0)*x483))+(((-1.0)*x446))+((x445*x483))+((sj5*x453*x484))+(((-1.0)*x464*x470*x482))+(((-1.0)*x475))+((x446*x477))+(((-1.0)*x445*x464*x466))+(((-1.0)*x488))+(((1.6577140605366e-10)*x462*x472))+(((-1.0)*x454*x456*x457))+x489+(((-0.999999999917114)*x487))+(((-1.0)*x477*x489))+(((-1.0)*r01*x460*x486))+(((-1.0)*x445*x456*x458))+((cj5*x464*x470))+(((-1.0)*cj0*x453*x454*x471))+((r00*x453*x486))+(((-8.28857030268299e-11)*x490))+((x464*x466))+(((-1.0)*x448*x477))+(((2.0)*x462*x465))+(((-1.0)*x461*x462*x466))+((x445*x475))+(((-1.0)*x454*x466*x467))+(((-1.0)*x477*x490))+(((-1.82083171127878e-5)*sj0*x457*x464))+((x456*x458))+((x473*x484))+(((1.99999999983423)*x457*x474))+((x477*x488))+((x477*x485))));
j4eval[2]=(((sj0*sj3*x471))+(((-1.0)*sj5*x455*x467))+(((-1.0)*r00*x454*x455))+((cj0*cj5*r10*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x491=(sj0*sj1);
IkReal x492=((0.0482288862115347)*py);
IkReal x493=((0.258620347309223)*cj1);
IkReal x494=(cj5*r11);
IkReal x495=((0.00196772650020906)*sj1);
IkReal x496=(cj1*sj5);
IkReal x497=(cj1*sj0);
IkReal x498=(cj0*r00);
IkReal x499=((0.0482288862115347)*sj1);
IkReal x500=((0.00196772650020906)*cj1);
IkReal x501=(r11*sj5);
IkReal x502=(r20*sj1);
IkReal x503=((0.258620347309223)*cj5);
IkReal x504=((4.14275696447682e-8)*sj5);
IkReal x505=((5.44486870943124e-6)*sj5);
IkReal x506=(cj0*px);
IkReal x507=((6.33877284319691)*sj1);
IkReal x508=((6.33877284319691)*py);
IkReal x509=(cj5*r20);
IkReal x510=(r21*sj5);
IkReal x511=(cj1*pz);
IkReal x512=((0.258620347309223)*sj1);
IkReal x513=((5.44486870943124e-6)*cj5);
IkReal x514=(r21*sj1);
IkReal x515=((4.14275696447682e-8)*cj5);
IkReal x516=(r10*sj0);
IkReal x517=(cj1*r21);
IkReal x518=(cj0*r01*sj5);
IkReal x519=((0.00196772650020906)*cj5*r10);
IkReal x520=(cj0*cj1*r01);
IkReal x521=(cj0*r01*sj1);
if( IKabs(((0.0393583484843067)+(((-5.44486870943124e-6)*x496*x498))+(((0.291583550787058)*cj1))+((x500*x509))+((x510*x512))+(((-1.0)*r10*x491*x504))+(((6.33877284319691)*cj1*x506))+(((-1.0)*sj1*x498*x504))+((x491*x492))+((x497*x508))+(((-1.0)*cj5*x493*x498))+(((-1.0)*x502*x503))+(((-1.0)*x502*x505))+(((-1.0)*cj5*x495*x498))+(((-1.0)*x513*x514))+(((-0.00196772650020906)*r21*x496))+((sj0*x493*x501))+(((4.14275696447682e-8)*r20*x496))+(((-5.44486870943124e-6)*x494*x497))+(((0.0022185287657306)*sj1))+(((-1.0)*x515*x521))+((x515*x517))+(((-0.0482288862115347)*x511))+(((-1.0)*cj5*x493*x516))+(((0.00196772650020906)*x491*x501))+(((-4.14275696447682e-8)*x491*x494))+((x495*x518))+(((-1.0)*x513*x520))+((x499*x506))+((pz*x507))+((x493*x518))+(((-1.0)*x491*x519))+(((-5.44486870943124e-6)*x496*x516)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.84026977947738)+(((-1.0)*x493*x510))+(((-1.0)*r10*x491*x503))+(((-1.0)*r10*x491*x505))+(((-0.0482288862115347)*cj1*x506))+(((-1.0)*sj1*x498*x503))+(((-1.0)*sj1*x498*x505))+((cj5*x498*x500))+(((4.14275696447682e-8)*x496*x516))+((x514*x515))+((x515*x520))+(((0.291583550787058)*sj1))+((x506*x507))+((x495*x509))+((x493*x509))+((x513*x517))+(((4.14275696447682e-8)*x496*x498))+((x512*x518))+(((4.14275696447682e-8)*x494*x497))+((x491*x508))+((x497*x519))+(((-0.00196772650020906)*r11*sj0*x496))+(((0.258620347309223)*x491*x501))+(((-6.33877284319691)*x511))+((x502*x504))+(((-5.44486870943124e-6)*x491*x494))+(((-1.0)*x513*x521))+(((-1.0)*pz*x499))+(((-0.00196772650020906)*cj0*r01*x496))+(((5.44486870943124e-6)*r20*x496))+(((-0.0022185287657306)*cj1))+(((-1.0)*x495*x510))+(((-1.0)*x492*x497)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0393583484843067)+(((-5.44486870943124e-6)*x496*x498))+(((0.291583550787058)*cj1))+((x500*x509))+((x510*x512))+(((-1.0)*r10*x491*x504))+(((6.33877284319691)*cj1*x506))+(((-1.0)*sj1*x498*x504))+((x491*x492))+((x497*x508))+(((-1.0)*cj5*x493*x498))+(((-1.0)*x502*x503))+(((-1.0)*x502*x505))+(((-1.0)*cj5*x495*x498))+(((-1.0)*x513*x514))+(((-0.00196772650020906)*r21*x496))+((sj0*x493*x501))+(((4.14275696447682e-8)*r20*x496))+(((-5.44486870943124e-6)*x494*x497))+(((0.0022185287657306)*sj1))+(((-1.0)*x515*x521))+((x515*x517))+(((-0.0482288862115347)*x511))+(((-1.0)*cj5*x493*x516))+(((0.00196772650020906)*x491*x501))+(((-4.14275696447682e-8)*x491*x494))+((x495*x518))+(((-1.0)*x513*x520))+((x499*x506))+((pz*x507))+((x493*x518))+(((-1.0)*x491*x519))+(((-5.44486870943124e-6)*x496*x516))))+IKsqr(((1.84026977947738)+(((-1.0)*x493*x510))+(((-1.0)*r10*x491*x503))+(((-1.0)*r10*x491*x505))+(((-0.0482288862115347)*cj1*x506))+(((-1.0)*sj1*x498*x503))+(((-1.0)*sj1*x498*x505))+((cj5*x498*x500))+(((4.14275696447682e-8)*x496*x516))+((x514*x515))+((x515*x520))+(((0.291583550787058)*sj1))+((x506*x507))+((x495*x509))+((x493*x509))+((x513*x517))+(((4.14275696447682e-8)*x496*x498))+((x512*x518))+(((4.14275696447682e-8)*x494*x497))+((x491*x508))+((x497*x519))+(((-0.00196772650020906)*r11*sj0*x496))+(((0.258620347309223)*x491*x501))+(((-6.33877284319691)*x511))+((x502*x504))+(((-5.44486870943124e-6)*x491*x494))+(((-1.0)*x513*x521))+(((-1.0)*pz*x499))+(((-0.00196772650020906)*cj0*r01*x496))+(((5.44486870943124e-6)*r20*x496))+(((-0.0022185287657306)*cj1))+(((-1.0)*x495*x510))+(((-1.0)*x492*x497))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((0.0393583484843067)+(((-5.44486870943124e-6)*x496*x498))+(((0.291583550787058)*cj1))+((x500*x509))+((x510*x512))+(((-1.0)*r10*x491*x504))+(((6.33877284319691)*cj1*x506))+(((-1.0)*sj1*x498*x504))+((x491*x492))+((x497*x508))+(((-1.0)*cj5*x493*x498))+(((-1.0)*x502*x503))+(((-1.0)*x502*x505))+(((-1.0)*cj5*x495*x498))+(((-1.0)*x513*x514))+(((-0.00196772650020906)*r21*x496))+((sj0*x493*x501))+(((4.14275696447682e-8)*r20*x496))+(((-5.44486870943124e-6)*x494*x497))+(((0.0022185287657306)*sj1))+(((-1.0)*x515*x521))+((x515*x517))+(((-0.0482288862115347)*x511))+(((-1.0)*cj5*x493*x516))+(((0.00196772650020906)*x491*x501))+(((-4.14275696447682e-8)*x491*x494))+((x495*x518))+(((-1.0)*x513*x520))+((x499*x506))+((pz*x507))+((x493*x518))+(((-1.0)*x491*x519))+(((-5.44486870943124e-6)*x496*x516))), ((1.84026977947738)+(((-1.0)*x493*x510))+(((-1.0)*r10*x491*x503))+(((-1.0)*r10*x491*x505))+(((-0.0482288862115347)*cj1*x506))+(((-1.0)*sj1*x498*x503))+(((-1.0)*sj1*x498*x505))+((cj5*x498*x500))+(((4.14275696447682e-8)*x496*x516))+((x514*x515))+((x515*x520))+(((0.291583550787058)*sj1))+((x506*x507))+((x495*x509))+((x493*x509))+((x513*x517))+(((4.14275696447682e-8)*x496*x498))+((x512*x518))+(((4.14275696447682e-8)*x494*x497))+((x491*x508))+((x497*x519))+(((-0.00196772650020906)*r11*sj0*x496))+(((0.258620347309223)*x491*x501))+(((-6.33877284319691)*x511))+((x502*x504))+(((-5.44486870943124e-6)*x491*x494))+(((-1.0)*x513*x521))+(((-1.0)*pz*x499))+(((-0.00196772650020906)*cj0*r01*x496))+(((5.44486870943124e-6)*r20*x496))+(((-0.0022185287657306)*cj1))+(((-1.0)*x495*x510))+(((-1.0)*x492*x497))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x522=IKcos(j2);
IkReal x523=IKsin(j2);
IkReal x524=(cj0*r00);
IkReal x525=((8.58978361288802e-7)*sj5);
IkReal x526=((0.04079975)*cj5);
IkReal x527=((8.58978361288802e-7)*cj5);
IkReal x528=((0.04079975)*sj5);
IkReal x529=(cj0*r01);
IkReal x530=(r11*sj0);
IkReal x531=(r10*sj0);
IkReal x532=((0.00120025)*x523);
IkReal x533=((0.15775011)*x523);
IkReal x534=(sj1*x522);
IkReal x535=(cj1*x522);
evalcond[0]=(((r21*x528))+(((-0.29035)*cj1))+(((-1.0)*sj1*x533))+(((-1.0)*r21*x527))+(((0.004)*sj1))+(((-1.0)*r20*x525))+(((-1.0)*r20*x526))+((cj1*x532))+pz+(((0.15775011)*x535))+(((0.00120025)*x534)));
evalcond[1]=((0.046)+(((-1.0)*x524*x525))+(((-1.0)*x524*x526))+(((-1.0)*x525*x531))+(((-1.0)*x526*x531))+(((-1.0)*sj1*x532))+(((-1.0)*x527*x529))+(((-1.0)*x527*x530))+(((-1.0)*cj1*x533))+(((-0.15775011)*x534))+(((0.004)*cj1))+(((0.29035)*sj1))+(((0.00120025)*x535))+((cj0*px))+((x528*x530))+((py*sj0))+((x528*x529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x536=cj5*cj5;
IkReal x537=r21*r21;
IkReal x538=r22*r22;
IkReal x539=r20*r20;
IkReal x540=r21*r21*r21;
IkReal x541=r21*r21*r21*r21;
CheckValue<IkReal> x551=IKPowWithIntegerCheck(r20,-2);
if(!x551.valid){
continue;
}
IkReal x542=x551.value;
IkReal x543=((2.50004552120722e+39)*x536);
IkReal x544=((4.55216216503188e+34)*cj5*r22);
IkReal x545=((12064806877.4106)*x536);
IkReal x546=((219679.829546644)*cj5*r22);
IkReal x547=(x541*x542);
IkReal x548=(x536*x537);
IkReal x549=(x540*x542);
IkReal x550=(x537*x538*x542);
j4eval[0]=((((-24129613754.8213)*x548))+(((-1.0)*x550))+(((-1.0)*x545*x547))+(((-1.0)*x539*x545))+(((-1.0)*r21*x546))+(((-12064806878.4106)*x538))+(((-1.0)*x546*x549)));
j4eval[1]=r20;
j4eval[2]=IKsign(((((-1.0)*x544*x549))+(((-2.50004552141443e+39)*x538))+(((-1.0)*x539*x543))+(((-2.07218030641513e+29)*x550))+(((-1.0)*r21*x544))+(((-5.00009104241443e+39)*x548))+(((-1.0)*x543*x547))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
CheckValue<IkReal> x577=IKPowWithIntegerCheck(r20,-1);
if(!x577.valid){
continue;
}
IkReal x552=x577.value;
IkReal x553=cj5*cj5;
IkReal x554=r21*r21;
IkReal x555=((109839.914773322)*cj0);
IkReal x556=(r11*sj5);
IkReal x557=(r12*r22);
IkReal x558=((455212072161441.0)*cj5);
IkReal x559=(cj0*cj5);
IkReal x560=(r22*sj5);
IkReal x561=(r11*r22);
IkReal x562=(cj0*r10);
IkReal x563=(r00*r22);
IkReal x564=((5.000045521e+19)*cj0);
IkReal x565=(cj5*r20);
IkReal x566=(r00*sj0);
IkReal x567=((1.0)*cj5);
IkReal x568=(x552*x554);
IkReal x569=(r21*sj0*x552);
IkReal x570=(r01*sj0*sj5);
IkReal x571=(r02*r22*sj0);
IkReal x572=((5.000045521e+19)*x553);
IkReal x573=(r01*r22*sj0);
IkReal x574=((109839.914773322)*x553);
IkReal x575=(r10*r20*x553);
IkReal x576=(cj0*r21*r22*x552);
j4eval[0]=((((-1.0)*x555*x557))+(((-1.0)*r10*r21*r22*x552*x559))+((cj5*x555*x556*x568))+(((109839.914773322)*x571))+(((-1.0)*r10*x553*x555*x568))+(((-109839.914773322)*x565*x570))+((x560*x562))+(((-1.0)*x560*x566))+(((-1.0)*r01*x560*x569))+(((-1.0)*x567*x573))+((r20*x566*x574))+((x566*x568*x574))+(((-1.0)*x555*x575))+((x556*x576))+((x555*x556*x565))+((x559*x561))+(((-109839.914773322)*cj5*x568*x570))+((cj5*x563*x569)));
j4eval[1]=r20;
j4eval[2]=IKsign(((((5.000045521e+19)*x556*x559*x568))+(((-1.0)*x562*x568*x572))+(((455212072161441.0)*x560*x562))+(((-1.0)*r20*x562*x572))+(((-1.0)*x558*x573))+(((-1.0)*x557*x564))+(((5.000045521e+19)*x571))+(((455212072161441.0)*x556*x576))+((r20*x566*x572))+(((-455212072161441.0)*x560*x566))+((x558*x563*x569))+(((-5.000045521e+19)*cj5*x568*x570))+(((5.000045521e+19)*r20*x556*x559))+(((-455212072161441.0)*r01*x560*x569))+(((-5.000045521e+19)*x565*x570))+((x566*x568*x572))+(((-1.0)*r21*r22*x552*x558*x562))+((cj0*x558*x561))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
CheckValue<IkReal> x606=IKPowWithIntegerCheck(r20,-1);
if(!x606.valid){
continue;
}
IkReal x578=x606.value;
IkReal x579=r21*r21;
IkReal x580=cj5*cj5;
IkReal x581=(r02*sj0);
IkReal x582=(cj0*r12);
IkReal x583=(cj5*r20);
IkReal x584=(r21*r22);
IkReal x585=(cj0*sj5);
IkReal x586=((5.00004552120722e+19)*r22);
IkReal x587=(r10*x578);
IkReal x588=((4144322881.91412)*cj5);
IkReal x589=(sj0*sj5);
IkReal x590=((5.00004552079278e+19)*x578);
IkReal x591=((12064806877.4106)*x578);
IkReal x592=((455212072142576.0)*x578);
IkReal x593=((12064806878.4106)*r22);
IkReal x594=(r01*sj0*x578);
IkReal x595=((109839.914773322)*x580);
IkReal x596=(cj0*r11*x578);
IkReal x597=(r01*r20*sj0);
IkReal x598=((455212072142576.0)*x580);
IkReal x599=(cj5*x579);
IkReal x600=(cj0*cj5*r10);
IkReal x601=(cj0*r11*r20);
IkReal x602=(cj5*r00*sj0);
IkReal x603=((109839.914773322)*x578*x584);
IkReal x604=(r00*x578*x589);
IkReal x605=((455212072142576.0)*x599);
j4eval[0]=((((-1.0)*x593*x602))+((cj5*x584*x596))+(((-1.0)*x584*x604))+(((-109839.914773322)*x599*x604))+((x595*x601))+(((-12064806877.4106)*x582*x583))+((x579*x595*x596))+(((12064806877.4106)*x581*x583))+((x581*x591*x599))+(((-1.0)*x579*x594*x595))+((x593*x600))+(((109839.914773322)*r10*x583*x585))+((r01*x589*x593))+((x581*x603))+((x584*x585*x587))+(((-109839.914773322)*r00*x583*x589))+(((-1.0)*cj5*x584*x594))+(((-1.0)*x582*x591*x599))+(((-1.0)*x595*x597))+(((-1.0)*x582*x603))+(((109839.914773322)*x585*x587*x599))+(((-1.0)*r11*x585*x593)));
j4eval[1]=r20;
j4eval[2]=IKsign((((x585*x587*x605))+((x584*x588*x596))+(((-1.0)*x597*x598))+(((-1.0)*r01*sj0*x579*x580*x592))+(((-1.0)*x582*x590*x599))+(((455212072142576.0)*r10*x583*x585))+(((-1.0)*x586*x602))+(((-1.0)*r11*x585*x586))+(((-1.0)*x582*x584*x592))+(((-1.0)*x584*x588*x594))+(((-4144322881.91412)*x584*x604))+(((4144322881.91412)*x584*x585*x587))+((x581*x590*x599))+((r01*x586*x589))+((x581*x584*x592))+((x586*x600))+(((5.00004552079278e+19)*x581*x583))+(((-5.00004552079278e+19)*x582*x583))+(((-455212072142576.0)*r00*x583*x589))+((cj0*r11*x579*x580*x592))+((x598*x601))+(((-1.0)*r00*x589*x592*x599))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x634=IKPowWithIntegerCheck(r20,-1);
if(!x634.valid){
continue;
}
IkReal x607=x634.value;
IkReal x608=r21*r21;
IkReal x609=cj5*cj5;
IkReal x610=(cj0*r10);
IkReal x611=(r00*sj0);
IkReal x612=(r02*sj0);
IkReal x613=(cj0*r12);
IkReal x614=(r01*sj0);
IkReal x615=(cj0*r11);
IkReal x616=((5.00004552120722e+19)*r22);
IkReal x617=(sj1*sj2);
IkReal x618=((4144322881.91412)*cj5);
IkReal x619=((5.000045521e+19)*cj5);
IkReal x620=((5.00004552079278e+19)*cj5);
IkReal x621=(cj1*cj2);
IkReal x622=((455212072142576.0)*cj5);
IkReal x623=((5.000045521e+19)*sj5);
IkReal x624=((4144322881.91412)*sj5);
IkReal x625=(sj5*x622);
IkReal x626=(x607*x608);
IkReal x627=(r21*r22*x607);
IkReal x628=(sj5*x617);
IkReal x629=((5.00004552079278e+19)*x621);
IkReal x630=((455212072142576.0)*x609);
IkReal x631=((455212072142576.0)*sj5*x621);
IkReal x632=(x621*x622);
IkReal x633=(r20*x630);
CheckValue<IkReal> x635 = IKatan2WithCheck(IkReal(((((-1.0)*x614*x617*x622))+((x614*x632))+(((5.00004552079278e+19)*x612*x617))+(((-455212072142576.0)*x611*x628))+((x615*x617*x622))+((x613*x629))+(((-1.0)*x610*x631))+((x611*x631))+(((-1.0)*x612*x629))+(((-5.00004552079278e+19)*x613*x617))+(((-1.0)*x615*x632))+(((455212072142576.0)*x610*x628)))),IkReal((((x610*x617*x619))+((x615*x621*x623))+((x611*x619*x621))+(((-1.0)*x615*x617*x623))+(((-1.0)*x610*x619*x621))+(((-1.0)*x614*x621*x623))+((x614*x617*x623))+(((-1.0)*x611*x617*x619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x635.valid){
continue;
}
CheckValue<IkReal> x636=IKPowWithIntegerCheck(IKsign(((((-1.0)*x611*x624*x627))+((x615*x633))+((r20*x612*x620))+(((-1.0)*cj5*x611*x616))+((cj5*x610*x616))+((x612*x620*x626))+(((-1.0)*x614*x626*x630))+((r20*x610*x625))+(((-1.0)*x611*x625*x626))+((sj5*x614*x616))+(((-1.0)*r20*x613*x620))+(((-1.0)*x613*x620*x626))+(((-455212072142576.0)*x613*x627))+((x610*x624*x627))+((x615*x618*x627))+(((-1.0)*r20*x611*x625))+(((-1.0)*sj5*x615*x616))+(((-1.0)*x614*x633))+((x615*x626*x630))+(((455212072142576.0)*x612*x627))+(((-1.0)*x614*x618*x627))+((x610*x625*x626)))),-1);
if(!x636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x635.value)+(((1.5707963267949)*(x636.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x637=IKsin(j4);
CheckValue<IkReal> x663=IKPowWithIntegerCheck(r20,-1);
if(!x663.valid){
continue;
}
IkReal x638=x663.value;
IkReal x639=r21*r21;
IkReal x640=IKcos(j4);
IkReal x641=(sj1*sj2);
IkReal x642=((9.10415855677118e-6)*cj5);
IkReal x643=(r11*sj5);
IkReal x644=((0.999999999958557)*r02);
IkReal x645=((0.999999999958557)*r12);
IkReal x646=((1.0)*cj5);
IkReal x647=((1.0)*cj2);
IkReal x648=(cj1*sj2);
IkReal x649=(cj5*r00);
IkReal x650=(r01*sj5);
IkReal x651=(cj1*x647);
IkReal x652=(sj0*x637);
IkReal x653=((9.10415855677118e-6)*r10*sj5);
IkReal x654=(cj0*x637);
IkReal x655=(r22*x640);
IkReal x656=((9.10415855714848e-6)*r21*x638);
IkReal x657=(cj0*x640);
IkReal x658=(r22*x637);
IkReal x659=((9.10415855677118e-6)*r00*sj5);
IkReal x660=((1.0)*x650);
IkReal x661=(sj0*x640);
IkReal x662=(x638*x639);
evalcond[0]=((((-1.00000000004144)*x655))+(((-1.0)*x656*x658))+(((-1.0)*x651))+(((-1.0)*r20*x637*x646))+x641+(((-1.0)*x637*x646*x662)));
evalcond[1]=((((-1.0)*x648))+(((-1.0)*x640*x646*x662))+(((1.00000000004144)*x658))+(((-1.0)*sj1*x647))+(((-1.0)*x655*x656))+(((-1.0)*r20*x640*x646)));
evalcond[2]=((((-1.0)*r01*x642*x661))+(((-1.0)*r10*x646*x654))+(((-1.0)*x659*x661))+((x643*x654))+((x649*x652))+((x653*x657))+((x644*x661))+(((-1.0)*x645*x657))+(((-1.0)*x652*x660))+((r11*x642*x657)));
evalcond[3]=((((-1.0)*r10*x646*x657))+((x649*x661))+(((-1.0)*r11*x642*x654))+(((-1.0)*x660*x661))+((x645*x654))+((x643*x657))+((x652*x659))+(((-1.0)*x644*x652))+(((-1.0)*x653*x654))+((r01*x642*x652)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r10*x646*x652))+((x643*x652))+(((-1.0)*x645*x661))+((x657*x659))+x648+((x653*x661))+(((-1.0)*x644*x657))+((r11*x642*x661))+((x650*x654))+((r01*x642*x657))+(((-1.0)*r00*x646*x654)));
evalcond[5]=((((-1.0)*r11*x642*x652))+((x644*x654))+((x645*x652))+((x643*x661))+(((-1.0)*x651))+(((-1.0)*r01*x642*x654))+x641+(((-1.0)*r10*x646*x661))+((x650*x657))+(((-1.0)*x652*x653))+(((-1.0)*r00*x646*x657))+(((-1.0)*x654*x659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x691=IKPowWithIntegerCheck(r20,-1);
if(!x691.valid){
continue;
}
IkReal x664=x691.value;
IkReal x665=r21*r21;
IkReal x666=cj5*cj5;
IkReal x667=(r10*sj5);
IkReal x668=(cj5*r11);
IkReal x669=(cj1*cj2);
IkReal x670=((5.00004552079278e+19)*r12);
IkReal x671=(sj1*sj2);
IkReal x672=(cj0*x664);
IkReal x673=(cj5*r10);
IkReal x674=((5.000045521e+19)*sj5);
IkReal x675=(r01*sj0);
IkReal x676=(cj0*r20);
IkReal x677=((5.000045521e+19)*cj0);
IkReal x678=((5.000045521e+19)*sj0);
IkReal x679=((455212072142576.0)*cj5);
IkReal x680=((455212072161441.0)*r22);
IkReal x681=(cj0*x671);
IkReal x682=(r21*x680);
IkReal x683=((5.00004552079278e+19)*r02*sj0);
IkReal x684=(cj5*r00*sj0);
IkReal x685=(x664*x665);
IkReal x686=(r00*x666);
IkReal x687=(cj0*x680);
IkReal x688=((455212072142576.0)*cj0*x669);
IkReal x689=((455212072142576.0)*r00*sj0*sj5);
IkReal x690=((5.000045521e+19)*r10*x666);
CheckValue<IkReal> x692 = IKatan2WithCheck(IkReal((((r11*x674*x681))+((cj5*r00*x671*x678))+((x669*x674*x675))+(((-1.0)*x671*x674*x675))+((x669*x673*x677))+(((-1.0)*x671*x673*x677))+(((-1.0)*cj5*r00*x669*x678))+(((-1.0)*cj0*r11*x669*x674)))),IkReal((((x669*x689))+((x669*x675*x679))+(((-1.0)*x667*x688))+(((-1.0)*x670*x681))+(((455212072142576.0)*x668*x681))+(((-1.0)*x668*x688))+((x671*x683))+((cj0*x669*x670))+(((455212072142576.0)*x667*x681))+(((-1.0)*x671*x675*x679))+(((-1.0)*x671*x689))+(((-1.0)*x669*x683)))),IKFAST_ATAN2_MAGTHRESH);
if(!x692.valid){
continue;
}
CheckValue<IkReal> x693=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*x675*x680))+(((-1.0)*r00*sj0*sj5*x680))+(((-1.0)*x672*x673*x682))+(((-1.0)*cj5*x674*x675*x685))+(((-1.0)*sj5*x664*x675*x682))+((x665*x668*x672*x674))+((x668*x674*x676))+((r20*x678*x686))+((r02*r22*x678))+(((-1.0)*x676*x690))+(((-1.0)*x665*x672*x690))+((x667*x687))+(((-1.0)*r12*r22*x677))+((r11*sj5*x672*x682))+((x678*x685*x686))+(((-1.0)*cj5*r20*x674*x675))+((x664*x682*x684))+((x668*x687)))),-1);
if(!x693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x692.value)+(((1.5707963267949)*(x693.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x694=IKsin(j4);
CheckValue<IkReal> x720=IKPowWithIntegerCheck(r20,-1);
if(!x720.valid){
continue;
}
IkReal x695=x720.value;
IkReal x696=r21*r21;
IkReal x697=IKcos(j4);
IkReal x698=(sj1*sj2);
IkReal x699=((9.10415855677118e-6)*cj5);
IkReal x700=(r11*sj5);
IkReal x701=((0.999999999958557)*r02);
IkReal x702=((0.999999999958557)*r12);
IkReal x703=((1.0)*cj5);
IkReal x704=((1.0)*cj2);
IkReal x705=(cj1*sj2);
IkReal x706=(cj5*r00);
IkReal x707=(r01*sj5);
IkReal x708=(cj1*x704);
IkReal x709=(sj0*x694);
IkReal x710=((9.10415855677118e-6)*r10*sj5);
IkReal x711=(cj0*x694);
IkReal x712=(r22*x697);
IkReal x713=((9.10415855714848e-6)*r21*x695);
IkReal x714=(cj0*x697);
IkReal x715=(r22*x694);
IkReal x716=((9.10415855677118e-6)*r00*sj5);
IkReal x717=((1.0)*x707);
IkReal x718=(sj0*x697);
IkReal x719=(x695*x696);
evalcond[0]=((((-1.0)*x694*x703*x719))+(((-1.0)*r20*x694*x703))+(((-1.0)*x708))+x698+(((-1.00000000004144)*x712))+(((-1.0)*x713*x715)));
evalcond[1]=((((1.00000000004144)*x715))+(((-1.0)*x705))+(((-1.0)*x697*x703*x719))+(((-1.0)*r20*x697*x703))+(((-1.0)*x712*x713))+(((-1.0)*sj1*x704)));
evalcond[2]=(((r11*x699*x714))+((x701*x718))+((x700*x711))+((x706*x709))+(((-1.0)*x702*x714))+(((-1.0)*r01*x699*x718))+(((-1.0)*x709*x717))+(((-1.0)*r10*x703*x711))+((x710*x714))+(((-1.0)*x716*x718)));
evalcond[3]=(((x700*x714))+((x702*x711))+((x706*x718))+(((-1.0)*x710*x711))+(((-1.0)*r10*x703*x714))+(((-1.0)*r11*x699*x711))+((x709*x716))+(((-1.0)*x717*x718))+((r01*x699*x709))+(((-1.0)*x701*x709)));
evalcond[4]=(((cj2*sj1))+((x714*x716))+((r11*x699*x718))+(((-1.0)*x702*x718))+((x707*x711))+((x700*x709))+(((-1.0)*r10*x703*x709))+((x710*x718))+((r01*x699*x714))+(((-1.0)*r00*x703*x711))+x705+(((-1.0)*x701*x714)));
evalcond[5]=((((-1.0)*x711*x716))+((x701*x711))+((x700*x718))+((x702*x709))+((x707*x714))+(((-1.0)*r01*x699*x711))+(((-1.0)*x709*x710))+(((-1.0)*r10*x703*x718))+(((-1.0)*r11*x699*x709))+(((-1.0)*x708))+x698+(((-1.0)*r00*x703*x714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x721=cj5*cj5;
IkReal x722=r21*r21;
IkReal x723=r22*r22;
CheckValue<IkReal> x740=IKPowWithIntegerCheck(r20,-1);
if(!x740.valid){
continue;
}
IkReal x724=x740.value;
IkReal x725=(cj1*r22);
IkReal x726=((2.50004552131083e+39)*cj2);
IkReal x727=(cj2*x724);
IkReal x728=(r20*sj2);
IkReal x729=(r21*r22);
IkReal x730=((4.55216216503188e+34)*cj5);
IkReal x731=(r22*sj1);
IkReal x732=(cj2*r20);
IkReal x733=((2.50004552131083e+39)*sj2);
CheckValue<IkReal> x741=IKPowWithIntegerCheck(r20,-2);
if(!x741.valid){
continue;
}
IkReal x734=x741.value;
IkReal x735=((2.50004552120722e+39)*cj1*cj5);
IkReal x736=((2.50004552120722e+39)*cj5*sj1);
IkReal x737=((2.50004552120722e+39)*x721);
IkReal x738=((2.27608108251594e+34)*r21*sj2*x724);
IkReal x739=(sj2*x722*x724);
CheckValue<IkReal> x743=IKPowWithIntegerCheck(x734,-1);
if(!x743.valid){
continue;
}
CheckValue<IkReal> x742=IKPowWithIntegerCheck(IKsign(((((-5.00009104241443e+39)*x721*x722))+(((-2.07218030641513e+29)*x722*x723*x734))+(((-1.0)*x734*x737*(x722*x722)))+(((-2.50004552141443e+39)*x723))+(((-1.0)*x729*x730*x734*(r21*r21)))+(((-1.0)*x737*(x743.value)))+(((-1.0)*x729*x730)))),-1);
if(!x742.valid){
continue;
}
CheckValue<IkReal> x744 = IKatan2WithCheck(IkReal(((((-2.27608108251594e+34)*sj1*sj2*x724*x729))+((x722*x727*x735))+(((-1.0)*x736*x739))+(((2.27608108251594e+34)*r21*x725*x727))+(((-1.0)*x725*x733))+(((-1.0)*x726*x731))+(((-1.0)*x728*x736))+((x732*x735)))),IkReal((((x722*x727*x736))+((x728*x735))+(((-1.0)*x731*x733))+(((2.27608108251594e+34)*sj1*x727*x729))+((x735*x739))+((x725*x726))+((x725*x738))+((x732*x736)))),IKFAST_ATAN2_MAGTHRESH);
if(!x744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x742.value)))+(x744.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x745=IKsin(j4);
CheckValue<IkReal> x771=IKPowWithIntegerCheck(r20,-1);
if(!x771.valid){
continue;
}
IkReal x746=x771.value;
IkReal x747=r21*r21;
IkReal x748=IKcos(j4);
IkReal x749=(sj1*sj2);
IkReal x750=((9.10415855677118e-6)*cj5);
IkReal x751=(r11*sj5);
IkReal x752=((0.999999999958557)*r02);
IkReal x753=((0.999999999958557)*r12);
IkReal x754=((1.0)*cj5);
IkReal x755=((1.0)*cj2);
IkReal x756=(cj1*sj2);
IkReal x757=(cj5*r00);
IkReal x758=(r01*sj5);
IkReal x759=(cj1*x755);
IkReal x760=(sj0*x745);
IkReal x761=((9.10415855677118e-6)*r10*sj5);
IkReal x762=(cj0*x745);
IkReal x763=(r22*x748);
IkReal x764=((9.10415855714848e-6)*r21*x746);
IkReal x765=(cj0*x748);
IkReal x766=(r22*x745);
IkReal x767=((9.10415855677118e-6)*r00*sj5);
IkReal x768=((1.0)*x758);
IkReal x769=(sj0*x748);
IkReal x770=(x746*x747);
evalcond[0]=((((-1.0)*x745*x754*x770))+(((-1.0)*x764*x766))+x749+(((-1.0)*r20*x745*x754))+(((-1.0)*x759))+(((-1.00000000004144)*x763)));
evalcond[1]=((((-1.0)*r20*x748*x754))+(((-1.0)*sj1*x755))+(((-1.0)*x763*x764))+(((1.00000000004144)*x766))+(((-1.0)*x756))+(((-1.0)*x748*x754*x770)));
evalcond[2]=(((x757*x760))+(((-1.0)*r10*x754*x762))+(((-1.0)*r01*x750*x769))+((r11*x750*x765))+((x761*x765))+((x752*x769))+(((-1.0)*x753*x765))+(((-1.0)*x767*x769))+((x751*x762))+(((-1.0)*x760*x768)));
evalcond[3]=(((x757*x769))+(((-1.0)*r10*x754*x765))+(((-1.0)*x752*x760))+((x760*x767))+((x751*x765))+(((-1.0)*r11*x750*x762))+(((-1.0)*x768*x769))+((r01*x750*x760))+((x753*x762))+(((-1.0)*x761*x762)));
evalcond[4]=((((-1.0)*r10*x754*x760))+((cj2*sj1))+(((-1.0)*x752*x765))+(((-1.0)*r00*x754*x762))+((r11*x750*x769))+((x761*x769))+(((-1.0)*x753*x769))+((x758*x762))+((x765*x767))+((x751*x760))+x756+((r01*x750*x765)));
evalcond[5]=((((-1.0)*r10*x754*x769))+(((-1.0)*r01*x750*x762))+(((-1.0)*x762*x767))+(((-1.0)*r00*x754*x765))+((x752*x762))+((x758*x765))+((x751*x769))+x749+(((-1.0)*r11*x750*x760))+(((-1.0)*x760*x761))+(((-1.0)*x759))+((x753*x760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x772=(sj0*sj1);
IkReal x773=((0.106430805255421)*cj5);
IkReal x774=(r11*sj5);
IkReal x775=((4.26906448428795e-6)*cj5);
IkReal x776=(cj1*r20);
IkReal x777=(cj1*sj0);
IkReal x778=((4.96993251131808)*py);
IkReal x779=(cj0*sj1);
IkReal x780=((2.60861415218037)*px);
IkReal x781=((2.24074310967467e-6)*sj5);
IkReal x782=((0.20277200397865)*sj5);
IkReal x783=(r21*sj1);
IkReal x784=(pz*sj1);
IkReal x785=((2.60861415218037)*py);
IkReal x786=(cj0*cj1);
IkReal x787=(cj1*pz);
IkReal x788=(r20*sj1);
IkReal x789=((4.96993251131808)*px);
IkReal x790=((4.26906448428795e-6)*sj5);
IkReal x791=((2.24074310967467e-6)*cj5);
IkReal x792=(cj1*r21);
IkReal x793=((0.20277200397865)*cj5);
IkReal x794=((0.106430805255421)*sj5);
IkReal x795=(r10*x793);
if( IKabs(((-0.737531389040297)+((r00*x773*x779))+(((2.60861415218037)*x787))+((r00*x779*x781))+((x786*x789))+((x777*x778))+(((-1.0)*r11*x775*x777))+((r01*x782*x786))+(((-1.0)*x775*x783))+(((4.96993251131808)*x784))+(((-1.0)*r01*x779*x794))+((x782*x783))+((r10*x772*x773))+(((-1.0)*x788*x790))+(((-1.0)*x788*x793))+(((-1.0)*x777*x795))+((r01*x779*x791))+(((-1.0)*x791*x792))+(((-1.0)*r00*x786*x793))+(((-1.0)*r00*x786*x790))+(((-1.0)*x776*x781))+(((-1.0)*x772*x785))+(((-1.0)*r10*x777*x790))+(((0.228616895520632)*cj1))+((x792*x794))+(((0.20277200397865)*x774*x777))+(((-0.119996251000297)*sj1))+(((-0.106430805255421)*x772*x774))+(((-1.0)*x773*x776))+(((-1.0)*r01*x775*x786))+((r10*x772*x781))+(((-1.0)*x779*x780))+((r11*x772*x791)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.45345436126993)+(((-4.96993251131808)*x787))+((r01*x786*x794))+(((2.60861415218037)*x784))+(((-1.0)*x783*x791))+(((-1.0)*x773*x788))+(((0.228616895520632)*sj1))+((x772*x778))+(((-1.0)*r00*x779*x790))+(((-1.0)*r00*x779*x793))+(((-1.0)*r01*x786*x791))+((x775*x792))+(((0.119996251000297)*cj1))+(((-1.0)*x781*x788))+((x783*x794))+(((-1.0)*r11*x772*x775))+(((-1.0)*r10*x772*x790))+(((-1.0)*r00*x781*x786))+((r01*x779*x782))+((x779*x789))+(((-1.0)*r00*x773*x786))+(((0.20277200397865)*x772*x774))+(((-1.0)*x772*x795))+(((-1.0)*r10*x777*x781))+(((-1.0)*r01*x775*x779))+(((-1.0)*x782*x792))+(((-1.0)*r11*x777*x791))+((x780*x786))+((x777*x785))+(((-1.0)*r10*x773*x777))+((x776*x790))+((x776*x793))+(((0.106430805255421)*x774*x777)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.737531389040297)+((r00*x773*x779))+(((2.60861415218037)*x787))+((r00*x779*x781))+((x786*x789))+((x777*x778))+(((-1.0)*r11*x775*x777))+((r01*x782*x786))+(((-1.0)*x775*x783))+(((4.96993251131808)*x784))+(((-1.0)*r01*x779*x794))+((x782*x783))+((r10*x772*x773))+(((-1.0)*x788*x790))+(((-1.0)*x788*x793))+(((-1.0)*x777*x795))+((r01*x779*x791))+(((-1.0)*x791*x792))+(((-1.0)*r00*x786*x793))+(((-1.0)*r00*x786*x790))+(((-1.0)*x776*x781))+(((-1.0)*x772*x785))+(((-1.0)*r10*x777*x790))+(((0.228616895520632)*cj1))+((x792*x794))+(((0.20277200397865)*x774*x777))+(((-0.119996251000297)*sj1))+(((-0.106430805255421)*x772*x774))+(((-1.0)*x773*x776))+(((-1.0)*r01*x775*x786))+((r10*x772*x781))+(((-1.0)*x779*x780))+((r11*x772*x791))))+IKsqr(((1.45345436126993)+(((-4.96993251131808)*x787))+((r01*x786*x794))+(((2.60861415218037)*x784))+(((-1.0)*x783*x791))+(((-1.0)*x773*x788))+(((0.228616895520632)*sj1))+((x772*x778))+(((-1.0)*r00*x779*x790))+(((-1.0)*r00*x779*x793))+(((-1.0)*r01*x786*x791))+((x775*x792))+(((0.119996251000297)*cj1))+(((-1.0)*x781*x788))+((x783*x794))+(((-1.0)*r11*x772*x775))+(((-1.0)*r10*x772*x790))+(((-1.0)*r00*x781*x786))+((r01*x779*x782))+((x779*x789))+(((-1.0)*r00*x773*x786))+(((0.20277200397865)*x772*x774))+(((-1.0)*x772*x795))+(((-1.0)*r10*x777*x781))+(((-1.0)*r01*x775*x779))+(((-1.0)*x782*x792))+(((-1.0)*r11*x777*x791))+((x780*x786))+((x777*x785))+(((-1.0)*r10*x773*x777))+((x776*x790))+((x776*x793))+(((0.106430805255421)*x774*x777))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-0.737531389040297)+((r00*x773*x779))+(((2.60861415218037)*x787))+((r00*x779*x781))+((x786*x789))+((x777*x778))+(((-1.0)*r11*x775*x777))+((r01*x782*x786))+(((-1.0)*x775*x783))+(((4.96993251131808)*x784))+(((-1.0)*r01*x779*x794))+((x782*x783))+((r10*x772*x773))+(((-1.0)*x788*x790))+(((-1.0)*x788*x793))+(((-1.0)*x777*x795))+((r01*x779*x791))+(((-1.0)*x791*x792))+(((-1.0)*r00*x786*x793))+(((-1.0)*r00*x786*x790))+(((-1.0)*x776*x781))+(((-1.0)*x772*x785))+(((-1.0)*r10*x777*x790))+(((0.228616895520632)*cj1))+((x792*x794))+(((0.20277200397865)*x774*x777))+(((-0.119996251000297)*sj1))+(((-0.106430805255421)*x772*x774))+(((-1.0)*x773*x776))+(((-1.0)*r01*x775*x786))+((r10*x772*x781))+(((-1.0)*x779*x780))+((r11*x772*x791))), ((1.45345436126993)+(((-4.96993251131808)*x787))+((r01*x786*x794))+(((2.60861415218037)*x784))+(((-1.0)*x783*x791))+(((-1.0)*x773*x788))+(((0.228616895520632)*sj1))+((x772*x778))+(((-1.0)*r00*x779*x790))+(((-1.0)*r00*x779*x793))+(((-1.0)*r01*x786*x791))+((x775*x792))+(((0.119996251000297)*cj1))+(((-1.0)*x781*x788))+((x783*x794))+(((-1.0)*r11*x772*x775))+(((-1.0)*r10*x772*x790))+(((-1.0)*r00*x781*x786))+((r01*x779*x782))+((x779*x789))+(((-1.0)*r00*x773*x786))+(((0.20277200397865)*x772*x774))+(((-1.0)*x772*x795))+(((-1.0)*r10*x777*x781))+(((-1.0)*r01*x775*x779))+(((-1.0)*x782*x792))+(((-1.0)*r11*x777*x791))+((x780*x786))+((x777*x785))+(((-1.0)*r10*x773*x777))+((x776*x790))+((x776*x793))+(((0.106430805255421)*x774*x777))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x796=IKcos(j2);
IkReal x797=IKsin(j2);
IkReal x798=(cj0*r00);
IkReal x799=((8.58978361288802e-7)*sj5);
IkReal x800=((0.04079975)*cj5);
IkReal x801=((8.58978361288802e-7)*cj5);
IkReal x802=((0.04079975)*sj5);
IkReal x803=(cj0*r01);
IkReal x804=(r11*sj0);
IkReal x805=(r10*sj0);
IkReal x806=((0.08279975)*x796);
IkReal x807=((0.15775011)*x797);
IkReal x808=((0.08279975)*x797);
IkReal x809=((0.15775011)*x796);
evalcond[0]=((((-0.29035)*cj1))+((r21*x802))+(((-1.0)*sj1*x807))+(((-1.0)*sj1*x806))+(((-1.0)*cj1*x808))+((cj1*x809))+(((-1.0)*r21*x801))+(((0.004)*sj1))+(((-1.0)*r20*x799))+(((-1.0)*r20*x800))+pz);
evalcond[1]=((0.046)+(((-1.0)*x798*x799))+(((-1.0)*x798*x800))+(((-1.0)*sj1*x809))+(((-1.0)*x799*x805))+(((-1.0)*cj1*x806))+(((-1.0)*cj1*x807))+(((-1.0)*x800*x805))+(((0.004)*cj1))+(((0.29035)*sj1))+((sj1*x808))+((cj0*px))+((py*sj0))+(((-1.0)*x801*x803))+(((-1.0)*x801*x804))+((x802*x803))+((x802*x804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x810=cj5*cj5;
IkReal x811=r21*r21;
IkReal x812=r22*r22;
IkReal x813=r20*r20;
IkReal x814=r21*r21*r21;
IkReal x815=r21*r21*r21*r21;
CheckValue<IkReal> x825=IKPowWithIntegerCheck(r20,-2);
if(!x825.valid){
continue;
}
IkReal x816=x825.value;
IkReal x817=((2.50004552120722e+39)*x810);
IkReal x818=((4.55216216503188e+34)*cj5*r22);
IkReal x819=((12064806877.4106)*x810);
IkReal x820=((219679.829546644)*cj5*r22);
IkReal x821=(x815*x816);
IkReal x822=(x810*x811);
IkReal x823=(x814*x816);
IkReal x824=(x811*x812*x816);
j4eval[0]=((((-12064806878.4106)*x812))+(((-1.0)*r21*x820))+(((-1.0)*x819*x821))+(((-1.0)*x824))+(((-24129613754.8213)*x822))+(((-1.0)*x813*x819))+(((-1.0)*x820*x823)));
j4eval[1]=r20;
j4eval[2]=IKsign(((((-2.50004552141443e+39)*x812))+(((-1.0)*x818*x823))+(((-1.0)*x817*x821))+(((-5.00009104241443e+39)*x822))+(((-1.0)*x813*x817))+(((-2.07218030641513e+29)*x824))+(((-1.0)*r21*x818))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
CheckValue<IkReal> x855=IKPowWithIntegerCheck(r20,-1);
if(!x855.valid){
continue;
}
IkReal x826=x855.value;
IkReal x827=cj5*cj5;
IkReal x828=r21*r21;
IkReal x829=((109839.914773322)*cj0);
IkReal x830=(r12*r22);
IkReal x831=(r11*sj5);
IkReal x832=(sj0*x826);
IkReal x833=(r01*sj5);
IkReal x834=(cj0*x826);
IkReal x835=(r21*r22);
IkReal x836=(cj5*r00);
IkReal x837=((5.000045521e+19)*cj0);
IkReal x838=((109839.914773322)*sj0);
IkReal x839=(r02*r22);
IkReal x840=(cj5*r20);
IkReal x841=((5.000045521e+19)*sj0);
IkReal x842=((455212072161441.0)*r22);
IkReal x843=(cj5*x834);
IkReal x844=((455212072161441.0)*x835);
IkReal x845=((5.000045521e+19)*x828);
IkReal x846=(x826*x828);
IkReal x847=(r10*x827);
IkReal x848=(r00*x827);
IkReal x849=(cj0*r10*sj5);
IkReal x850=(cj5*r01*sj0);
IkReal x851=((109839.914773322)*x828);
IkReal x852=(r00*sj0*sj5);
IkReal x853=(r20*x847);
IkReal x854=(cj0*cj5*r11*r22);
j4eval[0]=(((x829*x853))+(((-1.0)*r20*x838*x848))+(((-1.0)*x832*x848*x851))+((cj5*x832*x833*x851))+((x832*x833*x835))+(((-1.0)*cj5*x829*x831*x846))+(((-1.0)*x854))+(((-1.0)*r22*x849))+((r10*x835*x843))+((x833*x838*x840))+(((-1.0)*x831*x834*x835))+((x829*x830))+((r22*x852))+((r22*x850))+(((-1.0)*x829*x831*x840))+(((-1.0)*x838*x839))+((x829*x846*x847))+(((-1.0)*x832*x835*x836)));
j4eval[1]=r20;
j4eval[2]=IKsign((((x842*x852))+((x842*x850))+((x834*x845*x847))+(((-1.0)*x831*x837*x840))+((r10*x843*x844))+(((-1.0)*x831*x843*x845))+((x833*x840*x841))+((x832*x833*x844))+(((-1.0)*cj0*cj5*r11*x842))+(((-1.0)*x842*x849))+(((-1.0)*x832*x836*x844))+(((-1.0)*x831*x834*x844))+((x830*x837))+(((-1.0)*r20*x841*x848))+(((-1.0)*x839*x841))+((cj5*x832*x833*x845))+((x837*x853))+(((-1.0)*x832*x845*x848))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
CheckValue<IkReal> x884=IKPowWithIntegerCheck(r20,-1);
if(!x884.valid){
continue;
}
IkReal x856=x884.value;
IkReal x857=r21*r21;
IkReal x858=cj5*cj5;
IkReal x859=(r02*sj0);
IkReal x860=(cj0*r12);
IkReal x861=(cj5*r20);
IkReal x862=(r21*r22);
IkReal x863=(cj0*sj5);
IkReal x864=((5.00004552120722e+19)*r22);
IkReal x865=(r10*x856);
IkReal x866=((4144322881.91412)*cj5);
IkReal x867=(sj0*sj5);
IkReal x868=((5.00004552079278e+19)*x856);
IkReal x869=((12064806877.4106)*x856);
IkReal x870=((455212072142576.0)*x856);
IkReal x871=((12064806878.4106)*r22);
IkReal x872=(r01*sj0*x856);
IkReal x873=((109839.914773322)*x858);
IkReal x874=(cj0*r11*x856);
IkReal x875=(r01*r20*sj0);
IkReal x876=((455212072142576.0)*x858);
IkReal x877=(cj5*x857);
IkReal x878=(cj0*cj5*r10);
IkReal x879=(cj0*r11*r20);
IkReal x880=(cj5*r00*sj0);
IkReal x881=((109839.914773322)*x856*x862);
IkReal x882=(r00*x856*x867);
IkReal x883=((455212072142576.0)*x877);
j4eval[0]=(((cj5*x862*x874))+(((-12064806877.4106)*x860*x861))+((x862*x863*x865))+((x871*x878))+(((-1.0)*r11*x863*x871))+(((-1.0)*x860*x869*x877))+(((-109839.914773322)*x877*x882))+(((-1.0)*cj5*x862*x872))+(((109839.914773322)*r10*x861*x863))+(((-1.0)*x862*x882))+((x873*x879))+(((-1.0)*x873*x875))+((x859*x869*x877))+(((-109839.914773322)*r00*x861*x867))+((x857*x873*x874))+(((-1.0)*x871*x880))+(((12064806877.4106)*x859*x861))+((x859*x881))+((r01*x867*x871))+(((-1.0)*x857*x872*x873))+(((-1.0)*x860*x881))+(((109839.914773322)*x863*x865*x877)));
j4eval[1]=r20;
j4eval[2]=IKsign(((((5.00004552079278e+19)*x859*x861))+((x859*x862*x870))+((r01*x864*x867))+((x876*x879))+(((-455212072142576.0)*r00*x861*x867))+((cj0*r11*x857*x858*x870))+(((-1.0)*r11*x863*x864))+(((-1.0)*x862*x866*x872))+(((455212072142576.0)*r10*x861*x863))+(((-1.0)*x860*x862*x870))+((x862*x866*x874))+((x859*x868*x877))+((x863*x865*x883))+(((-1.0)*r01*sj0*x857*x858*x870))+(((4144322881.91412)*x862*x863*x865))+(((-1.0)*x864*x880))+(((-5.00004552079278e+19)*x860*x861))+(((-1.0)*x875*x876))+(((-1.0)*x860*x868*x877))+(((-4144322881.91412)*x862*x882))+((x864*x878))+(((-1.0)*r00*x867*x870*x877))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x912=IKPowWithIntegerCheck(r20,-1);
if(!x912.valid){
continue;
}
IkReal x885=x912.value;
IkReal x886=r21*r21;
IkReal x887=cj5*cj5;
IkReal x888=(sj0*sj5);
IkReal x889=((455212072142576.0)*r00);
IkReal x890=(cj1*sj2);
IkReal x891=(cj2*sj1);
IkReal x892=((5.000045521e+19)*r01);
IkReal x893=(cj5*r20);
IkReal x894=(cj0*sj5);
IkReal x895=((5.00004552120722e+19)*r22);
IkReal x896=(cj5*r10);
IkReal x897=((5.000045521e+19)*r11);
IkReal x898=(cj0*cj5);
IkReal x899=((5.00004552079278e+19)*r12);
IkReal x900=((5.000045521e+19)*cj0);
IkReal x901=((455212072142576.0)*r10);
IkReal x902=(cj5*sj0);
IkReal x903=((455212072142576.0)*cj0);
IkReal x904=((455212072142576.0)*r11);
IkReal x905=((5.000045521e+19)*r00);
IkReal x906=(x885*x886);
IkReal x907=((455212072142576.0)*r01*sj0);
IkReal x908=(r20*x887);
IkReal x909=((5.00004552079278e+19)*r02*sj0);
IkReal x910=(r21*r22*x885);
IkReal x911=((4144322881.91412)*x910);
CheckValue<IkReal> x913 = IKatan2WithCheck(IkReal((((x891*x894*x897))+((x890*x902*x905))+(((-1.0)*x888*x890*x892))+((x891*x902*x905))+(((-1.0)*x888*x891*x892))+(((-1.0)*x891*x896*x900))+((x890*x894*x897))+(((-1.0)*x890*x896*x900)))),IkReal((((x890*x894*x901))+((x891*x898*x904))+((x891*x909))+((x890*x909))+(((-1.0)*x888*x889*x891))+(((-1.0)*x888*x889*x890))+(((-1.0)*cj0*x891*x899))+(((-1.0)*cj0*x890*x899))+((x891*x894*x901))+(((-455212072142576.0)*r01*x890*x902))+(((-455212072142576.0)*r01*x891*x902))+((x890*x898*x904)))),IKFAST_ATAN2_MAGTHRESH);
if(!x913.valid){
continue;
}
CheckValue<IkReal> x914=IKPowWithIntegerCheck(IKsign((((cj0*x895*x896))+(((-1.0)*x887*x906*x907))+(((-1.0)*x898*x899*x906))+((r01*x888*x895))+(((-1.0)*x888*x889*x893))+((x893*x894*x901))+((r11*x898*x911))+((r11*x887*x903*x906))+(((-1.0)*r00*x888*x911))+((x893*x909))+(((-1.0)*r00*x895*x902))+(((-1.0)*r11*x894*x895))+(((-1.0)*r12*x903*x910))+(((455212072142576.0)*r02*sj0*x910))+((r11*x903*x908))+(((-1.0)*r01*x902*x911))+(((-1.0)*cj0*x893*x899))+((r10*x894*x911))+(((455212072142576.0)*x894*x896*x906))+(((-1.0)*x907*x908))+(((-1.0)*cj5*x888*x889*x906))+(((5.00004552079278e+19)*r02*x902*x906)))),-1);
if(!x914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x913.value)+(((1.5707963267949)*(x914.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x915=IKcos(j4);
CheckValue<IkReal> x942=IKPowWithIntegerCheck(r20,-1);
if(!x942.valid){
continue;
}
IkReal x916=x942.value;
IkReal x917=IKsin(j4);
IkReal x918=r21*r21;
IkReal x919=(cj2*sj1);
IkReal x920=(cj1*sj2);
IkReal x921=((9.10415855677118e-6)*cj5);
IkReal x922=(r11*sj5);
IkReal x923=((0.999999999958557)*r02);
IkReal x924=((0.999999999958557)*r12);
IkReal x925=((1.0)*cj5);
IkReal x926=(sj1*sj2);
IkReal x927=(cj1*cj2);
IkReal x928=(cj5*r00);
IkReal x929=(r01*sj5);
IkReal x930=(sj0*x917);
IkReal x931=((9.10415855677118e-6)*r10*sj5);
IkReal x932=(cj0*x917);
IkReal x933=(r22*x915);
IkReal x934=((9.10415855714848e-6)*r21*x916);
IkReal x935=(cj0*x915);
IkReal x936=(r22*x917);
IkReal x937=((9.10415855677118e-6)*r00*sj5);
IkReal x938=((1.0)*x929);
IkReal x939=(sj0*x915);
IkReal x940=(x916*x918);
IkReal x941=(x920+x919);
evalcond[0]=((((-1.0)*r20*x915*x925))+(((-1.0)*x915*x925*x940))+(((1.00000000004144)*x936))+(((-1.0)*x933*x934))+x941);
evalcond[1]=((((-1.00000000004144)*x933))+(((-1.0)*r20*x917*x925))+(((-1.0)*x934*x936))+(((-1.0)*x927))+(((-1.0)*x917*x925*x940))+x926);
evalcond[2]=((((-1.0)*x930*x938))+((x928*x930))+(((-1.0)*x924*x935))+((r11*x921*x935))+((x931*x935))+((x923*x939))+((x922*x932))+(((-1.0)*x937*x939))+(((-1.0)*r10*x925*x932))+(((-1.0)*r01*x921*x939)));
evalcond[3]=((((-1.0)*r11*x921*x932))+((x924*x932))+(((-1.0)*x931*x932))+((x928*x939))+((x930*x937))+(((-1.0)*x938*x939))+((x922*x935))+(((-1.0)*r10*x925*x935))+((r01*x921*x930))+(((-1.0)*x923*x930)));
evalcond[4]=((((-1.0)*r00*x925*x932))+(((-1.0)*x924*x939))+((r11*x921*x939))+((x935*x937))+((x931*x939))+((x922*x930))+(((-1.0)*r10*x925*x930))+x941+((x929*x932))+((r01*x921*x935))+(((-1.0)*x923*x935)));
evalcond[5]=((((-1.0)*r00*x925*x935))+(((-1.0)*r11*x921*x930))+(((-1.0)*x930*x931))+((x924*x930))+(((-1.0)*x926))+((x923*x932))+((x922*x939))+(((-1.0)*x932*x937))+(((-1.0)*r10*x925*x939))+(((-1.0)*r01*x921*x932))+x927+((x929*x935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x968=IKPowWithIntegerCheck(r20,-1);
if(!x968.valid){
continue;
}
IkReal x943=x968.value;
IkReal x944=r21*r21;
IkReal x945=cj5*cj5;
IkReal x946=(sj0*sj5);
IkReal x947=((455212072142576.0)*r00);
IkReal x948=(cj1*sj2);
IkReal x949=(r11*sj5);
IkReal x950=(cj2*sj1);
IkReal x951=((5.000045521e+19)*r01);
IkReal x952=(cj5*r10);
IkReal x953=((5.000045521e+19)*cj0);
IkReal x954=(cj5*x943);
IkReal x955=((455212072161441.0)*r22);
IkReal x956=(r00*sj0);
IkReal x957=(cj5*r20);
IkReal x958=(r02*sj0);
IkReal x959=((5.000045521e+19)*cj5);
IkReal x960=((5.00004552079278e+19)*cj0*r12);
IkReal x961=(r10*x945);
IkReal x962=(x943*x944);
IkReal x963=((5.000045521e+19)*x945);
IkReal x964=(cj0*cj5*r11);
IkReal x965=(cj0*r10*sj5);
IkReal x966=((455212072142576.0)*cj5*r01*sj0);
IkReal x967=(cj0*r21*x943*x955);
CheckValue<IkReal> x969 = IKatan2WithCheck(IkReal(((((455212072142576.0)*x950*x965))+(((455212072142576.0)*x950*x964))+(((-1.0)*x946*x947*x950))+(((455212072142576.0)*x948*x964))+(((455212072142576.0)*x948*x965))+(((-1.0)*x946*x947*x948))+(((-1.0)*x950*x966))+(((-1.0)*x950*x960))+(((5.00004552079278e+19)*x948*x958))+(((5.00004552079278e+19)*x950*x958))+(((-1.0)*x948*x960))+(((-1.0)*x948*x966)))),IkReal((((x950*x952*x953))+((x946*x950*x951))+((x946*x948*x951))+(((-1.0)*x949*x950*x953))+((x948*x952*x953))+(((-1.0)*x950*x956*x959))+(((-1.0)*x948*x949*x953))+(((-1.0)*x948*x956*x959)))),IKFAST_ATAN2_MAGTHRESH);
if(!x969.valid){
continue;
}
CheckValue<IkReal> x970=IKPowWithIntegerCheck(IKsign((((x952*x967))+(((-1.0)*x956*x962*x963))+((x953*x961*x962))+(((-1.0)*x944*x949*x953*x954))+((r20*x953*x961))+((r00*x946*x955))+((r12*r22*x953))+((x944*x946*x951*x954))+(((-1.0)*r20*x956*x963))+((x946*x951*x957))+(((-1.0)*r21*x954*x955*x956))+(((-1.0)*x949*x953*x957))+((cj5*r01*sj0*x955))+(((-1.0)*x955*x964))+(((-1.0)*x955*x965))+(((-1.0)*x949*x967))+(((-5.000045521e+19)*r22*x958))+((r01*r21*x943*x946*x955)))),-1);
if(!x970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x969.value)+(((1.5707963267949)*(x970.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x971=IKcos(j4);
CheckValue<IkReal> x998=IKPowWithIntegerCheck(r20,-1);
if(!x998.valid){
continue;
}
IkReal x972=x998.value;
IkReal x973=IKsin(j4);
IkReal x974=r21*r21;
IkReal x975=(cj2*sj1);
IkReal x976=(cj1*sj2);
IkReal x977=((9.10415855677118e-6)*cj5);
IkReal x978=(r11*sj5);
IkReal x979=((0.999999999958557)*r02);
IkReal x980=((0.999999999958557)*r12);
IkReal x981=((1.0)*cj5);
IkReal x982=(sj1*sj2);
IkReal x983=(cj1*cj2);
IkReal x984=(cj5*r00);
IkReal x985=(r01*sj5);
IkReal x986=(sj0*x973);
IkReal x987=((9.10415855677118e-6)*r10*sj5);
IkReal x988=(cj0*x973);
IkReal x989=(r22*x971);
IkReal x990=((9.10415855714848e-6)*r21*x972);
IkReal x991=(cj0*x971);
IkReal x992=(r22*x973);
IkReal x993=((9.10415855677118e-6)*r00*sj5);
IkReal x994=((1.0)*x985);
IkReal x995=(sj0*x971);
IkReal x996=(x972*x974);
IkReal x997=(x975+x976);
evalcond[0]=((((-1.0)*x971*x981*x996))+(((1.00000000004144)*x992))+(((-1.0)*r20*x971*x981))+(((-1.0)*x989*x990))+x997);
evalcond[1]=((((-1.0)*x983))+(((-1.0)*x990*x992))+(((-1.0)*x973*x981*x996))+(((-1.0)*r20*x973*x981))+x982+(((-1.00000000004144)*x989)));
evalcond[2]=(((r11*x977*x991))+(((-1.0)*r10*x981*x988))+((x987*x991))+((x984*x986))+(((-1.0)*x993*x995))+(((-1.0)*r01*x977*x995))+(((-1.0)*x986*x994))+(((-1.0)*x980*x991))+((x979*x995))+((x978*x988)));
evalcond[3]=((((-1.0)*r11*x977*x988))+((r01*x977*x986))+((x986*x993))+(((-1.0)*x994*x995))+((x978*x991))+(((-1.0)*r10*x981*x991))+(((-1.0)*x987*x988))+(((-1.0)*x979*x986))+((x980*x988))+((x984*x995)));
evalcond[4]=(((x991*x993))+((r11*x977*x995))+(((-1.0)*r10*x981*x986))+((x987*x995))+((r01*x977*x991))+((x985*x988))+(((-1.0)*x979*x991))+x997+(((-1.0)*r00*x981*x988))+(((-1.0)*x980*x995))+((x978*x986)));
evalcond[5]=((((-1.0)*r11*x977*x986))+(((-1.0)*x982))+(((-1.0)*r00*x981*x991))+(((-1.0)*x986*x987))+((x978*x995))+((x979*x988))+(((-1.0)*r01*x977*x988))+(((-1.0)*r10*x981*x995))+((x980*x986))+x983+((x985*x991))+(((-1.0)*x988*x993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x999=cj5*cj5;
IkReal x1000=r21*r21;
IkReal x1001=r22*r22;
CheckValue<IkReal> x1018=IKPowWithIntegerCheck(r20,-1);
if(!x1018.valid){
continue;
}
IkReal x1002=x1018.value;
IkReal x1003=(cj1*r22);
IkReal x1004=((2.50004552131083e+39)*cj2);
IkReal x1005=(cj2*x1002);
IkReal x1006=(r20*sj2);
IkReal x1007=(r21*r22);
IkReal x1008=((4.55216216503188e+34)*cj5);
IkReal x1009=(r22*sj1);
IkReal x1010=(cj2*r20);
IkReal x1011=((2.50004552131083e+39)*sj2);
CheckValue<IkReal> x1019=IKPowWithIntegerCheck(r20,-2);
if(!x1019.valid){
continue;
}
IkReal x1012=x1019.value;
IkReal x1013=((2.50004552120722e+39)*cj1*cj5);
IkReal x1014=((2.50004552120722e+39)*cj5*sj1);
IkReal x1015=((2.50004552120722e+39)*x999);
IkReal x1016=((2.27608108251594e+34)*r21*sj2*x1002);
IkReal x1017=(sj2*x1000*x1002);
CheckValue<IkReal> x1021=IKPowWithIntegerCheck(x1012,-1);
if(!x1021.valid){
continue;
}
CheckValue<IkReal> x1020=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1015*(x1021.value)))+(((-2.50004552141443e+39)*x1001))+(((-5.00009104241443e+39)*x1000*x999))+(((-1.0)*x1007*x1008*x1012*(r21*r21)))+(((-1.0)*x1007*x1008))+(((-2.07218030641513e+29)*x1000*x1001*x1012))+(((-1.0)*x1012*x1015*(x1000*x1000))))),-1);
if(!x1020.valid){
continue;
}
CheckValue<IkReal> x1022 = IKatan2WithCheck(IkReal((((x1003*x1011))+(((-1.0)*x1014*x1017))+((x1000*x1005*x1013))+(((2.27608108251594e+34)*r21*x1003*x1005))+(((-1.0)*x1006*x1014))+(((-2.27608108251594e+34)*sj1*sj2*x1002*x1007))+((x1004*x1009))+((x1010*x1013)))),IkReal(((((-1.0)*x1000*x1005*x1014))+(((-2.27608108251594e+34)*sj1*x1005*x1007))+(((-1.0)*x1010*x1014))+(((-1.0)*x1009*x1011))+(((-1.0)*x1006*x1013))+(((-1.0)*x1003*x1016))+(((-1.0)*x1013*x1017))+((x1003*x1004)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1020.value)))+(x1022.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1023=IKcos(j4);
CheckValue<IkReal> x1050=IKPowWithIntegerCheck(r20,-1);
if(!x1050.valid){
continue;
}
IkReal x1024=x1050.value;
IkReal x1025=IKsin(j4);
IkReal x1026=r21*r21;
IkReal x1027=(cj2*sj1);
IkReal x1028=(cj1*sj2);
IkReal x1029=((9.10415855677118e-6)*cj5);
IkReal x1030=(r11*sj5);
IkReal x1031=((0.999999999958557)*r02);
IkReal x1032=((0.999999999958557)*r12);
IkReal x1033=((1.0)*cj5);
IkReal x1034=(sj1*sj2);
IkReal x1035=(cj1*cj2);
IkReal x1036=(cj5*r00);
IkReal x1037=(r01*sj5);
IkReal x1038=(sj0*x1025);
IkReal x1039=((9.10415855677118e-6)*r10*sj5);
IkReal x1040=(cj0*x1025);
IkReal x1041=(r22*x1023);
IkReal x1042=((9.10415855714848e-6)*r21*x1024);
IkReal x1043=(cj0*x1023);
IkReal x1044=(r22*x1025);
IkReal x1045=((9.10415855677118e-6)*r00*sj5);
IkReal x1046=((1.0)*x1037);
IkReal x1047=(sj0*x1023);
IkReal x1048=(x1024*x1026);
IkReal x1049=(x1027+x1028);
evalcond[0]=(x1049+(((1.00000000004144)*x1044))+(((-1.0)*r20*x1023*x1033))+(((-1.0)*x1041*x1042))+(((-1.0)*x1023*x1033*x1048)));
evalcond[1]=(x1034+(((-1.0)*x1035))+(((-1.00000000004144)*x1041))+(((-1.0)*x1042*x1044))+(((-1.0)*r20*x1025*x1033))+(((-1.0)*x1025*x1033*x1048)));
evalcond[2]=((((-1.0)*x1032*x1043))+((x1036*x1038))+(((-1.0)*x1038*x1046))+(((-1.0)*x1045*x1047))+((x1039*x1043))+((x1031*x1047))+((r11*x1029*x1043))+(((-1.0)*r10*x1033*x1040))+((x1030*x1040))+(((-1.0)*r01*x1029*x1047)));
evalcond[3]=((((-1.0)*r11*x1029*x1040))+(((-1.0)*x1046*x1047))+((x1038*x1045))+(((-1.0)*x1039*x1040))+((r01*x1029*x1038))+(((-1.0)*r10*x1033*x1043))+((x1030*x1043))+(((-1.0)*x1031*x1038))+((x1036*x1047))+((x1032*x1040)));
evalcond[4]=((((-1.0)*x1032*x1047))+((x1030*x1038))+(((-1.0)*x1031*x1043))+x1049+((x1043*x1045))+((x1037*x1040))+((x1039*x1047))+((r11*x1029*x1047))+((r01*x1029*x1043))+(((-1.0)*r00*x1033*x1040))+(((-1.0)*r10*x1033*x1038)));
evalcond[5]=(x1035+(((-1.0)*x1034))+((x1037*x1043))+(((-1.0)*x1038*x1039))+((x1031*x1040))+(((-1.0)*r10*x1033*x1047))+(((-1.0)*r11*x1029*x1038))+((x1030*x1047))+(((-1.0)*r00*x1033*x1043))+(((-1.0)*x1040*x1045))+((x1032*x1038))+(((-1.0)*r01*x1029*x1040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1051=cj0*cj0;
IkReal x1052=cj5*cj5;
IkReal x1053=r00*r00;
IkReal x1054=r01*r01;
IkReal x1055=r02*r02;
IkReal x1056=r10*r10;
IkReal x1057=r11*r11;
IkReal x1058=(r10*sj5);
IkReal x1059=(cj5*r01);
IkReal x1060=((1.82083171127878e-5)*r02);
IkReal x1061=(cj5*r11);
IkReal x1062=(cj0*sj3);
IkReal x1063=(r00*r10);
IkReal x1064=(r00*sj5);
IkReal x1065=(sj0*sj3);
IkReal x1066=(cj0*sj0);
IkReal x1067=(r01*r11);
IkReal x1068=((1.82083171127878e-5)*x1066);
IkReal x1069=((8.28857030268299e-11)*x1053);
IkReal x1070=((1.99999999983423)*x1066);
IkReal x1071=((0.999999999917114)*x1051);
IkReal x1072=((1.99999999983423)*x1051);
IkReal x1073=(x1052*x1053);
IkReal x1074=((1.82083171127878e-5)*r12*x1051);
IkReal x1075=((0.999999999917114)*x1052*x1054);
CheckValue<IkReal> x1076 = IKatan2WithCheck(IkReal(((((-9.10415855677118e-6)*x1064*x1065))+(((9.10415855677118e-6)*x1061*x1062))+(((-0.999999999958557)*r12*x1062))+(((0.999999999958557)*r02*x1065))+(((-9.10415855677118e-6)*x1059*x1065))+(((9.10415855677118e-6)*x1058*x1062)))),IkReal((((cj5*r10*x1062))+((r01*sj5*x1065))+(((-1.0)*cj5*r00*x1065))+(((-1.0)*r11*sj5*x1062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1076.valid){
continue;
}
CheckValue<IkReal> x1077=IKPowWithIntegerCheck(IKsign(((((1.6577140605366e-10)*x1063*x1066))+((x1055*x1071))+(((-1.0)*x1058*x1060*x1066))+((x1058*x1074))+(((-1.0)*x1051*x1060*x1064))+x1075+(((-1.0)*r12*x1064*x1068))+((x1061*x1074))+((x1052*x1057*x1071))+((x1060*x1064))+(((-1.0)*x1052*x1056*x1071))+(((-1.0)*x1058*x1059*x1070))+((r02*r12*x1070))+((x1071*x1073))+(((-1.0)*x1052*x1054*x1071))+((x1051*x1069))+(((-0.999999999917114)*x1073))+(((-1.0)*x1059*x1064*x1072))+(((-8.28857030268299e-11)*x1051*x1056))+(((-1.0)*x1052*x1067*x1070))+((x1058*x1061*x1072))+(((-0.999999999917114)*x1055))+((x1051*x1054))+((x1052*x1063*x1070))+(((-1.0)*x1054))+(((1.99999999983423)*x1059*x1064))+(((2.0)*x1066*x1067))+(((-1.0)*x1051*x1057))+((x1059*x1060))+(((-1.0)*r12*x1059*x1068))+(((-1.0)*x1069))+(((-1.0)*x1061*x1064*x1070))+(((-1.0)*x1060*x1061*x1066))+(((-1.0)*x1051*x1059*x1060))+(((-1.0)*x1071*(r12*r12))))),-1);
if(!x1077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1076.value)+(((1.5707963267949)*(x1077.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1078=IKsin(j4);
IkReal x1079=IKcos(j4);
IkReal x1080=(cj0*r10);
IkReal x1081=(cj0*r11);
IkReal x1082=(r01*sj0);
IkReal x1083=(r00*sj0);
IkReal x1084=((1.0)*x1079);
IkReal x1085=((0.999999999958557)*r02*sj0);
IkReal x1086=(sj5*x1078);
IkReal x1087=((0.999999999958557)*cj0*r12);
IkReal x1088=((9.10415855677118e-6)*x1079);
IkReal x1089=(cj5*x1083);
IkReal x1090=((9.10415855677118e-6)*cj5*x1078);
evalcond[0]=(((x1079*x1085))+(((-1.0)*x1082*x1086))+((x1081*x1086))+(((-1.0)*cj5*x1078*x1080))+((x1078*x1089))+((sj5*x1080*x1088))+(((-1.0)*cj5*x1082*x1088))+((cj5*x1081*x1088))+(((-1.0)*x1079*x1087))+(((-1.0)*sj5*x1083*x1088)));
evalcond[1]=(((x1079*x1089))+(((-1.0)*sj3))+(((-1.0)*sj5*x1082*x1084))+((x1078*x1087))+(((-1.0)*x1081*x1090))+(((-1.0)*x1078*x1085))+((sj5*x1079*x1081))+((x1082*x1090))+(((9.10415855677118e-6)*x1083*x1086))+(((-9.10415855677118e-6)*x1080*x1086))+(((-1.0)*cj5*x1080*x1084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x1091=(cj3*sj3);
j2eval[0]=x1091;
j2eval[1]=IKsign(x1091);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1092=(cj4*cj5);
IkReal x1093=(cj1*r20);
IkReal x1094=(cj5*sj4);
IkReal x1095=(cj4*sj5);
IkReal x1096=(r20*sj1);
IkReal x1097=(r21*sj1);
IkReal x1098=(sj4*sj5);
IkReal x1099=(cj1*r21*sj5);
IkReal x1100=((9.10415855677118e-6)*x1097);
IkReal x1101=((0.999999999958557)*r22*sj1);
IkReal x1102=((9.10415855677118e-6)*cj1*r21);
IkReal x1103=((0.999999999958557)*cj1*r22);
if( IKabs((((cj1*r21*x1095))+(((-9.10415855677118e-6)*x1093*x1098))+(((-1.0)*x1092*x1100))+((cj4*x1101))+((x1094*x1096))+(((-1.0)*x1092*x1093))+((sj4*x1103))+(((-1.0)*x1094*x1102))+(((-9.10415855677118e-6)*x1095*x1096))+(((-1.0)*x1097*x1098)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x1098))+((x1092*x1102))+(((-1.0)*cj4*x1103))+(((-9.10415855677118e-6)*x1096*x1098))+((x1095*x1097))+(((-1.0)*x1092*x1096))+((sj4*x1101))+(((-1.0)*x1094*x1100))+(((9.10415855677118e-6)*x1093*x1095))+(((-1.0)*x1093*x1094)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r21*x1095))+(((-9.10415855677118e-6)*x1093*x1098))+(((-1.0)*x1092*x1100))+((cj4*x1101))+((x1094*x1096))+(((-1.0)*x1092*x1093))+((sj4*x1103))+(((-1.0)*x1094*x1102))+(((-9.10415855677118e-6)*x1095*x1096))+(((-1.0)*x1097*x1098))))+IKsqr((((cj1*r21*x1098))+((x1092*x1102))+(((-1.0)*cj4*x1103))+(((-9.10415855677118e-6)*x1096*x1098))+((x1095*x1097))+(((-1.0)*x1092*x1096))+((sj4*x1101))+(((-1.0)*x1094*x1100))+(((9.10415855677118e-6)*x1093*x1095))+(((-1.0)*x1093*x1094))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r21*x1095))+(((-9.10415855677118e-6)*x1093*x1098))+(((-1.0)*x1092*x1100))+((cj4*x1101))+((x1094*x1096))+(((-1.0)*x1092*x1093))+((sj4*x1103))+(((-1.0)*x1094*x1102))+(((-9.10415855677118e-6)*x1095*x1096))+(((-1.0)*x1097*x1098))), (((cj1*r21*x1098))+((x1092*x1102))+(((-1.0)*cj4*x1103))+(((-9.10415855677118e-6)*x1096*x1098))+((x1095*x1097))+(((-1.0)*x1092*x1096))+((sj4*x1101))+(((-1.0)*x1094*x1100))+(((9.10415855677118e-6)*x1093*x1095))+(((-1.0)*x1093*x1094))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1104=IKcos(j2);
IkReal x1105=IKsin(j2);
IkReal x1106=(cj0*r00);
IkReal x1107=((8.58978361288802e-7)*sj5);
IkReal x1108=((0.999999999958557)*cj4);
IkReal x1109=(r12*sj0);
IkReal x1110=((1.0)*r10);
IkReal x1111=(cj0*r02);
IkReal x1112=((0.999999999958557)*sj4);
IkReal x1113=((9.10415855677118e-6)*r11);
IkReal x1114=(cj0*r01);
IkReal x1115=((9.10415855677118e-6)*sj4);
IkReal x1116=((0.04079975)*cj5);
IkReal x1117=((9.10415855677118e-6)*cj4);
IkReal x1118=(r10*sj0);
IkReal x1119=(cj5*r21);
IkReal x1120=((0.04079975)*sj5);
IkReal x1121=((1.0)*cj5);
IkReal x1122=(r20*sj5);
IkReal x1123=((0.00120025)*sj1);
IkReal x1124=(r21*sj5);
IkReal x1125=(sj4*sj5);
IkReal x1126=(r11*sj0);
IkReal x1127=(cj4*sj5);
IkReal x1128=((8.58978361288802e-7)*cj5);
IkReal x1129=(sj1*x1105);
IkReal x1130=(cj1*x1105);
IkReal x1131=(cj5*sj0*sj4);
IkReal x1132=((1.0)*x1104);
IkReal x1133=(sj1*x1104);
IkReal x1134=(cj4*cj5*sj0);
IkReal x1135=(cj1*x1104);
IkReal x1136=(cj1*x1132);
evalcond[0]=(x1129+(((-1.0)*r20*sj4*x1121))+((sj4*x1124))+(((-1.0)*r22*x1108))+(((-1.0)*x1136))+((x1117*x1122))+((x1117*x1119)));
evalcond[1]=((((-1.0)*sj1*x1132))+((r22*x1112))+((cj4*x1124))+(((-1.0)*x1130))+(((-1.0)*cj4*r20*x1121))+(((-1.0)*x1115*x1122))+(((-1.0)*x1115*x1119)));
evalcond[2]=((((-0.29035)*cj1))+(((0.00120025)*x1130))+((x1104*x1123))+(((-8.58978361288802e-7)*x1119))+(((0.15775011)*x1135))+(((-1.0)*r20*x1107))+(((0.004)*sj1))+(((-1.0)*r20*x1116))+((r21*x1120))+pz+(((-0.15775011)*x1129)));
evalcond[3]=(x1133+x1130+((sj5*x1117*x1118))+((x1114*x1125))+(((-1.0)*sj4*x1106*x1121))+((x1113*x1134))+((x1125*x1126))+((cj5*x1114*x1117))+(((-1.0)*x1108*x1109))+(((-1.0)*x1108*x1111))+(((-1.0)*x1110*x1131))+((sj5*x1106*x1117)));
evalcond[4]=(((x1109*x1112))+x1129+((x1114*x1127))+((x1111*x1112))+(((-1.0)*sj5*x1115*x1118))+(((-1.0)*x1113*x1131))+(((-1.0)*cj4*x1106*x1121))+(((-1.0)*x1136))+(((-1.0)*x1110*x1134))+(((-1.0)*sj5*x1106*x1115))+((x1126*x1127))+(((-1.0)*cj5*x1114*x1115)));
evalcond[5]=((0.046)+((x1114*x1120))+(((-1.0)*x1114*x1128))+(((0.00120025)*x1135))+((x1120*x1126))+(((-1.0)*x1116*x1118))+(((-1.0)*x1126*x1128))+(((-1.0)*x1105*x1123))+(((-1.0)*x1107*x1118))+(((-1.0)*x1106*x1116))+(((0.004)*cj1))+(((-1.0)*x1106*x1107))+(((0.29035)*sj1))+((cj0*px))+((py*sj0))+(((-0.15775011)*x1130))+(((-0.15775011)*x1133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1137=((9.10415855677118e-6)*r22);
IkReal x1138=((0.999999999958557)*sj1);
IkReal x1139=(r20*sj5);
IkReal x1140=(cj5*r21);
IkReal x1141=((9.10415855677118e-6)*cj4);
IkReal x1142=(cj4*r22);
IkReal x1143=((0.999999999958557)*cj1);
IkReal x1144=(r21*sj4*sj5);
IkReal x1145=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x1140*x1143))+(((-1.0)*sj1*x1140*x1141))+(((-1.0)*cj1*x1137))+(((-1.0)*sj1*x1144))+((sj1*x1145))+(((-1.0)*sj1*x1139*x1141))+(((-1.0)*x1139*x1143))+((x1138*x1142)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x1137))+(((-1.0)*cj1*x1145))+((cj1*x1144))+((cj1*x1139*x1141))+(((-1.0)*x1138*x1139))+(((-1.0)*x1142*x1143))+((cj1*x1140*x1141))+(((-1.0)*x1138*x1140)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1140*x1143))+(((-1.0)*sj1*x1140*x1141))+(((-1.0)*cj1*x1137))+(((-1.0)*sj1*x1144))+((sj1*x1145))+(((-1.0)*sj1*x1139*x1141))+(((-1.0)*x1139*x1143))+((x1138*x1142))))+IKsqr(((((-1.0)*sj1*x1137))+(((-1.0)*cj1*x1145))+((cj1*x1144))+((cj1*x1139*x1141))+(((-1.0)*x1138*x1139))+(((-1.0)*x1142*x1143))+((cj1*x1140*x1141))+(((-1.0)*x1138*x1140))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1140*x1143))+(((-1.0)*sj1*x1140*x1141))+(((-1.0)*cj1*x1137))+(((-1.0)*sj1*x1144))+((sj1*x1145))+(((-1.0)*sj1*x1139*x1141))+(((-1.0)*x1139*x1143))+((x1138*x1142))), ((((-1.0)*sj1*x1137))+(((-1.0)*cj1*x1145))+((cj1*x1144))+((cj1*x1139*x1141))+(((-1.0)*x1138*x1139))+(((-1.0)*x1142*x1143))+((cj1*x1140*x1141))+(((-1.0)*x1138*x1140))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1146=IKsin(j2);
IkReal x1147=IKcos(j2);
IkReal x1148=((0.999999999958557)*cj4);
IkReal x1149=(r12*sj0);
IkReal x1150=(r10*sj0);
IkReal x1151=(cj0*r02);
IkReal x1152=((0.04079975)*cj0);
IkReal x1153=((9.10415855677118e-6)*cj4);
IkReal x1154=(cj5*r21);
IkReal x1155=(r01*sj5);
IkReal x1156=(r11*sj0);
IkReal x1157=((0.04079975)*sj5);
IkReal x1158=((0.04079975)*cj5);
IkReal x1159=((8.58978361288802e-7)*sj5);
IkReal x1160=((0.999999999958557)*sj5);
IkReal x1161=(sj4*sj5);
IkReal x1162=(sj1*x1146);
IkReal x1163=(cj0*r00*sj5);
IkReal x1164=((1.0)*cj5*sj4);
IkReal x1165=((1.0)*x1147);
IkReal x1166=(cj1*x1146);
IkReal x1167=(sj1*x1147);
IkReal x1168=(cj0*cj5*r01);
IkReal x1169=(cj1*x1147);
IkReal x1170=(cj1*x1165);
evalcond[0]=((((-1.0)*r20*x1160))+(((-1.0)*sj1*x1165))+(((-9.10415855677118e-6)*r22))+(((-0.999999999958557)*x1154))+(((-1.0)*x1166)));
evalcond[1]=((((-1.0)*r20*x1164))+x1162+((r21*x1161))+((x1153*x1154))+((r20*sj5*x1153))+(((-1.0)*x1170))+(((-1.0)*r22*x1148)));
evalcond[2]=(x1162+(((-1.0)*cj0*r00*x1160))+(((-1.0)*x1150*x1160))+(((-0.999999999958557)*cj5*x1156))+(((-1.0)*x1170))+(((-0.999999999958557)*x1168))+(((-9.10415855677118e-6)*x1149))+(((-9.10415855677118e-6)*x1151)));
evalcond[3]=((((-0.15775011)*x1162))+(((-0.29035)*cj1))+(((0.15775011)*x1169))+(((0.004)*sj1))+pz+(((-1.0)*r20*x1158))+(((-1.0)*r20*x1159))+(((-0.04079986)*x1167))+(((-0.04079986)*x1166))+((r21*x1157))+(((-8.58978361288802e-7)*x1154)));
evalcond[4]=(x1166+x1167+(((-1.0)*cj0*r00*x1164))+((x1153*x1163))+((x1153*x1168))+(((-1.0)*x1150*x1164))+((x1156*x1161))+((sj5*x1150*x1153))+(((-1.0)*x1148*x1151))+((cj0*sj4*x1155))+(((-1.0)*x1148*x1149))+((cj5*x1153*x1156)));
evalcond[5]=((0.046)+(((-0.15775011)*x1166))+(((-0.15775011)*x1167))+(((-8.58978361288802e-7)*x1168))+(((-1.0)*cj0*r00*x1159))+(((0.04079986)*x1162))+((x1152*x1155))+(((-1.0)*cj5*r00*x1152))+(((-8.58978361288802e-7)*cj5*x1156))+(((0.004)*cj1))+(((0.29035)*sj1))+(((-0.04079986)*x1169))+((cj0*px))+((py*sj0))+((x1156*x1157))+(((-1.0)*x1150*x1158))+(((-1.0)*x1150*x1159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1171=((1.0)*cj4);
IkReal x1172=(sj1*sj4);
IkReal x1173=((0.999999999958557)*r22);
IkReal x1174=(cj1*sj4);
IkReal x1175=(cj1*cj4);
IkReal x1176=(cj4*sj1);
IkReal x1177=(cj5*r20);
IkReal x1178=(r21*sj5);
IkReal x1179=(cj1*x1178);
IkReal x1180=((9.10415855677118e-6)*r20*sj5);
IkReal x1181=((9.10415855677118e-6)*cj5*r21);
IkReal x1182=(cj4*x1181);
if( IKabs(((((-1.0)*x1176*x1180))+(((-1.0)*x1176*x1181))+(((-1.0)*x1173*x1174))+(((-1.0)*x1172*x1178))+((x1173*x1176))+((x1174*x1180))+((x1174*x1181))+((x1175*x1177))+(((-1.0)*x1171*x1179))+((x1172*x1177)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1173*x1175))+((x1174*x1178))+(((-1.0)*x1172*x1173))+(((-1.0)*sj1*x1171*x1178))+((x1175*x1180))+((x1175*x1181))+((x1172*x1180))+((x1172*x1181))+((x1176*x1177))+(((-1.0)*x1174*x1177)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1176*x1180))+(((-1.0)*x1176*x1181))+(((-1.0)*x1173*x1174))+(((-1.0)*x1172*x1178))+((x1173*x1176))+((x1174*x1180))+((x1174*x1181))+((x1175*x1177))+(((-1.0)*x1171*x1179))+((x1172*x1177))))+IKsqr(((((-1.0)*x1173*x1175))+((x1174*x1178))+(((-1.0)*x1172*x1173))+(((-1.0)*sj1*x1171*x1178))+((x1175*x1180))+((x1175*x1181))+((x1172*x1180))+((x1172*x1181))+((x1176*x1177))+(((-1.0)*x1174*x1177))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1176*x1180))+(((-1.0)*x1176*x1181))+(((-1.0)*x1173*x1174))+(((-1.0)*x1172*x1178))+((x1173*x1176))+((x1174*x1180))+((x1174*x1181))+((x1175*x1177))+(((-1.0)*x1171*x1179))+((x1172*x1177))), ((((-1.0)*x1173*x1175))+((x1174*x1178))+(((-1.0)*x1172*x1173))+(((-1.0)*sj1*x1171*x1178))+((x1175*x1180))+((x1175*x1181))+((x1172*x1180))+((x1172*x1181))+((x1176*x1177))+(((-1.0)*x1174*x1177))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1183=IKsin(j2);
IkReal x1184=IKcos(j2);
IkReal x1185=(cj0*r00);
IkReal x1186=((8.58978361288802e-7)*sj5);
IkReal x1187=((0.999999999958557)*cj4);
IkReal x1188=(r12*sj0);
IkReal x1189=((1.0)*r10);
IkReal x1190=(cj0*r02);
IkReal x1191=((0.999999999958557)*sj4);
IkReal x1192=((9.10415855677118e-6)*r11);
IkReal x1193=(cj0*r01);
IkReal x1194=((9.10415855677118e-6)*sj4);
IkReal x1195=((0.04079975)*cj5);
IkReal x1196=((9.10415855677118e-6)*cj4);
IkReal x1197=(r10*sj0);
IkReal x1198=(cj5*r21);
IkReal x1199=((0.04079975)*sj5);
IkReal x1200=((1.0)*cj5);
IkReal x1201=(r20*sj5);
IkReal x1202=((0.08279975)*sj1);
IkReal x1203=(r21*sj5);
IkReal x1204=(sj4*sj5);
IkReal x1205=(cj4*sj5);
IkReal x1206=(r11*sj0);
IkReal x1207=((8.58978361288802e-7)*cj5);
IkReal x1208=(sj1*x1184);
IkReal x1209=(cj1*x1183);
IkReal x1210=(cj1*x1184);
IkReal x1211=(cj5*sj0*sj4);
IkReal x1212=(sj1*x1183);
IkReal x1213=(cj4*cj5*sj0);
IkReal x1214=(x1209+x1208);
evalcond[0]=(x1214+(((-1.0)*x1194*x1198))+((r22*x1191))+(((-1.0)*cj4*r20*x1200))+(((-1.0)*x1194*x1201))+((cj4*x1203)));
evalcond[1]=(x1212+(((-1.0)*r20*sj4*x1200))+((sj4*x1203))+(((-1.0)*r22*x1187))+((x1196*x1198))+((x1196*x1201))+(((-1.0)*x1210)));
evalcond[2]=((((-0.15775011)*x1212))+(((-0.29035)*cj1))+(((0.15775011)*x1210))+(((-8.58978361288802e-7)*x1198))+(((0.004)*sj1))+(((-1.0)*x1184*x1202))+((r21*x1199))+pz+(((-0.08279975)*x1209))+(((-1.0)*r20*x1186))+(((-1.0)*r20*x1195)));
evalcond[3]=(((x1204*x1206))+((cj5*x1193*x1196))+x1214+((x1193*x1204))+((sj5*x1196*x1197))+((x1192*x1213))+(((-1.0)*x1187*x1188))+(((-1.0)*x1187*x1190))+(((-1.0)*sj4*x1185*x1200))+(((-1.0)*x1189*x1211))+((sj5*x1185*x1196)));
evalcond[4]=(x1210+(((-1.0)*x1192*x1211))+(((-1.0)*cj5*x1193*x1194))+((x1193*x1205))+(((-1.0)*sj5*x1185*x1194))+((x1188*x1191))+(((-1.0)*sj5*x1194*x1197))+((x1205*x1206))+(((-1.0)*cj4*x1185*x1200))+(((-1.0)*x1189*x1213))+((x1190*x1191))+(((-1.0)*x1212)));
evalcond[5]=((0.046)+(((-0.15775011)*x1209))+(((-0.15775011)*x1208))+(((-1.0)*x1195*x1197))+((x1183*x1202))+(((-1.0)*x1186*x1197))+((x1199*x1206))+(((0.004)*cj1))+(((-1.0)*x1185*x1186))+((x1193*x1199))+(((0.29035)*sj1))+(((-1.0)*x1185*x1195))+(((-0.08279975)*x1210))+((cj0*px))+(((-1.0)*x1206*x1207))+((py*sj0))+(((-1.0)*x1193*x1207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1215=((9.10415855677118e-6)*r22);
IkReal x1216=(r20*sj5);
IkReal x1217=((0.999999999958557)*sj1);
IkReal x1218=((9.10415855677118e-6)*cj4);
IkReal x1219=(cj5*sj1);
IkReal x1220=(cj4*r22);
IkReal x1221=((0.999999999958557)*cj1);
IkReal x1222=(r20*sj4);
IkReal x1223=(cj5*r21);
IkReal x1224=(r21*sj4*sj5);
if( IKabs((((x1217*x1220))+((x1216*x1221))+((x1219*x1222))+(((-1.0)*sj1*x1216*x1218))+((x1221*x1223))+(((-1.0)*r21*x1218*x1219))+(((-1.0)*sj1*x1224))+((cj1*x1215)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1217*x1223))+(((-1.0)*cj1*cj5*x1222))+(((-1.0)*x1220*x1221))+((cj1*x1218*x1223))+((sj1*x1215))+((x1216*x1217))+((cj1*x1216*x1218))+((cj1*x1224)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1217*x1220))+((x1216*x1221))+((x1219*x1222))+(((-1.0)*sj1*x1216*x1218))+((x1221*x1223))+(((-1.0)*r21*x1218*x1219))+(((-1.0)*sj1*x1224))+((cj1*x1215))))+IKsqr((((x1217*x1223))+(((-1.0)*cj1*cj5*x1222))+(((-1.0)*x1220*x1221))+((cj1*x1218*x1223))+((sj1*x1215))+((x1216*x1217))+((cj1*x1216*x1218))+((cj1*x1224))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1217*x1220))+((x1216*x1221))+((x1219*x1222))+(((-1.0)*sj1*x1216*x1218))+((x1221*x1223))+(((-1.0)*r21*x1218*x1219))+(((-1.0)*sj1*x1224))+((cj1*x1215))), (((x1217*x1223))+(((-1.0)*cj1*cj5*x1222))+(((-1.0)*x1220*x1221))+((cj1*x1218*x1223))+((sj1*x1215))+((x1216*x1217))+((cj1*x1216*x1218))+((cj1*x1224))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1225=IKsin(j2);
IkReal x1226=IKcos(j2);
IkReal x1227=((0.999999999958557)*cj4);
IkReal x1228=(r12*sj0);
IkReal x1229=(r10*sj0);
IkReal x1230=(cj0*r02);
IkReal x1231=(cj0*r00);
IkReal x1232=((0.999999999958557)*sj5);
IkReal x1233=((0.04079975)*cj5);
IkReal x1234=((9.10415855677118e-6)*cj4);
IkReal x1235=(cj5*r21);
IkReal x1236=(cj0*r01);
IkReal x1237=((0.04079975)*sj5);
IkReal x1238=(r11*sj0);
IkReal x1239=((0.999999999958557)*cj5);
IkReal x1240=((8.58978361288802e-7)*sj5);
IkReal x1241=(sj4*sj5);
IkReal x1242=((8.58978361288802e-7)*cj5);
IkReal x1243=(sj1*x1226);
IkReal x1244=(cj1*x1225);
IkReal x1245=(cj1*x1226);
IkReal x1246=((1.0)*cj5*sj4);
IkReal x1247=(sj1*x1225);
IkReal x1248=(x1243+x1244);
evalcond[0]=(x1248+(((-0.999999999958557)*x1235))+(((-1.0)*r20*x1232))+(((-9.10415855677118e-6)*r22)));
evalcond[1]=(x1247+((x1234*x1235))+(((-1.0)*x1245))+(((-1.0)*r20*x1246))+((r21*x1241))+(((-1.0)*r22*x1227))+((r20*sj5*x1234)));
evalcond[2]=((((-9.10415855677118e-6)*x1230))+x1245+(((-1.0)*x1247))+(((-1.0)*x1238*x1239))+(((-1.0)*x1236*x1239))+(((-1.0)*x1229*x1232))+(((-1.0)*x1231*x1232))+(((-9.10415855677118e-6)*x1228)));
evalcond[3]=((((-0.04079964)*x1244))+(((-0.04079964)*x1243))+(((-0.29035)*cj1))+(((-8.58978361288802e-7)*x1235))+(((-1.0)*r20*x1233))+(((0.15775011)*x1245))+(((0.004)*sj1))+(((-1.0)*r20*x1240))+pz+(((-0.15775011)*x1247))+((r21*x1237)));
evalcond[4]=((((-1.0)*x1231*x1246))+x1248+((x1236*x1241))+((cj5*x1234*x1236))+((cj5*x1234*x1238))+(((-1.0)*x1229*x1246))+(((-1.0)*x1227*x1228))+(((-1.0)*x1227*x1230))+((sj5*x1231*x1234))+((x1238*x1241))+((sj5*x1229*x1234)));
evalcond[5]=((0.046)+(((-1.0)*x1231*x1240))+(((-0.04079964)*x1245))+(((-1.0)*x1236*x1242))+(((-1.0)*x1229*x1240))+(((-1.0)*x1238*x1242))+(((0.004)*cj1))+(((0.04079964)*x1247))+(((0.29035)*sj1))+(((-1.0)*x1229*x1233))+((x1237*x1238))+((cj0*px))+((py*sj0))+(((-0.15775011)*x1243))+(((-0.15775011)*x1244))+(((-1.0)*x1231*x1233))+((x1236*x1237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1249=(cj5*sj3);
IkReal x1250=(cj1*cj4);
IkReal x1251=((1.0)*r20);
IkReal x1252=((0.999999999958557)*sj1);
IkReal x1253=(sj3*sj4);
IkReal x1254=((9.10415855677118e-6)*sj1);
IkReal x1255=(r21*sj4);
IkReal x1256=(cj3*sj0);
IkReal x1257=(r20*sj5);
IkReal x1258=((9.10415855677118e-6)*cj1);
IkReal x1259=(cj4*sj1);
IkReal x1260=(r10*sj5);
IkReal x1261=((0.999999999958557)*cj1*cj3);
IkReal x1262=(cj5*r11*sj0);
IkReal x1263=(cj0*r00*sj5);
IkReal x1264=(cj0*cj5*r01);
IkReal x1265=(r21*sj3*sj5);
IkReal x1266=(cj0*cj3*r02);
CheckValue<IkReal> x1267 = IKatan2WithCheck(IkReal((((x1252*x1256*x1260))+(((-1.0)*x1249*x1250*x1251))+((cj5*r11*x1252*x1256))+(((-1.0)*x1253*x1257*x1258))+((x1250*x1265))+((cj3*x1252*x1263))+((cj3*x1252*x1264))+((x1254*x1266))+(((-1.0)*x1249*x1255*x1258))+((r12*x1254*x1256))+(((0.999999999958557)*cj1*r22*x1253)))),IkReal(((((-1.0)*x1258*x1266))+(((-1.0)*x1261*x1264))+(((-1.0)*x1261*x1263))+(((-1.0)*r12*x1256*x1258))+(((-1.0)*x1253*x1254*x1257))+(((-1.0)*x1249*x1254*x1255))+(((-0.999999999958557)*cj1*cj5*r11*x1256))+((x1259*x1265))+((r22*x1252*x1253))+(((-1.0)*x1249*x1251*x1259))+(((-0.999999999958557)*cj1*x1256*x1260)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1267.valid){
continue;
}
CheckValue<IkReal> x1268=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x1268.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1267.value)+(((1.5707963267949)*(x1268.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1269=IKsin(j2);
IkReal x1270=IKcos(j2);
IkReal x1271=((0.999999999958557)*cj4);
IkReal x1272=(r12*sj0);
IkReal x1273=((1.0)*r10);
IkReal x1274=(cj0*r02);
IkReal x1275=((0.999999999958557)*sj4);
IkReal x1276=((9.10415855677118e-6)*r11);
IkReal x1277=(cj0*cj5);
IkReal x1278=((9.10415855677118e-6)*sj4);
IkReal x1279=(cj4*sj0);
IkReal x1280=(r10*sj5);
IkReal x1281=(cj5*r21);
IkReal x1282=((1.0)*cj1);
IkReal x1283=((0.04079975)*sj5);
IkReal x1284=(cj0*r01);
IkReal x1285=((1.0)*cj4);
IkReal x1286=((1.1e-7)*cj1);
IkReal x1287=(r20*sj5);
IkReal x1288=((9.10415855677118e-6)*cj4);
IkReal x1289=((0.042)*cj3);
IkReal x1290=(cj5*sj0);
IkReal x1291=(cj5*r20);
IkReal x1292=((1.0)*sj4);
IkReal x1293=((1.1e-7)*sj3);
IkReal x1294=(sj4*sj5);
IkReal x1295=(cj4*sj5);
IkReal x1296=(r11*sj0);
IkReal x1297=(cj0*r00*sj5);
IkReal x1298=(sj1*x1270);
IkReal x1299=(sj1*x1269);
IkReal x1300=(sj4*x1290);
IkReal x1301=(sj3*x1269);
IkReal x1302=(cj1*x1269);
IkReal x1303=(sj3*x1270);
IkReal x1304=(cj1*x1270);
evalcond[0]=((((-9.10415855677118e-6)*r22))+(((-1.0)*sj3*x1298))+(((-1.0)*x1282*x1301))+(((-0.999999999958557)*x1287))+(((-0.999999999958557)*x1281)));
evalcond[1]=(x1299+((r21*x1294))+(((-1.0)*x1270*x1282))+(((-1.0)*r22*x1271))+((x1287*x1288))+(((-1.0)*x1291*x1292))+((x1281*x1288)));
evalcond[2]=((((-1.0)*cj3*x1269*x1282))+(((-1.0)*cj3*x1298))+((r21*x1295))+((r22*x1275))+(((-1.0)*x1278*x1281))+(((-1.0)*x1278*x1287))+(((-1.0)*x1285*x1291)));
evalcond[3]=(((sj3*x1299))+(((-0.999999999958557)*x1297))+(((-0.999999999958557)*r01*x1277))+(((-1.0)*x1282*x1303))+(((-0.999999999958557)*r11*x1290))+(((-9.10415855677118e-6)*x1274))+(((-9.10415855677118e-6)*x1272))+(((-0.999999999958557)*sj0*x1280)));
evalcond[4]=(x1302+(((9.10415855677118e-6)*x1279*x1280))+x1298+(((-1.0)*r00*x1277*x1292))+((x1294*x1296))+(((-1.0)*x1271*x1274))+(((-1.0)*x1271*x1272))+((x1288*x1297))+((x1284*x1294))+((cj5*x1276*x1279))+(((-1.0)*x1273*x1300))+((r01*x1277*x1288)));
evalcond[5]=((((-1.0)*cj3*x1270*x1282))+(((-1.0)*x1278*x1297))+((cj3*x1299))+(((-1.0)*x1276*x1300))+((x1272*x1275))+((x1274*x1275))+(((-1.0)*sj0*x1278*x1280))+(((-1.0)*r00*x1277*x1285))+(((-1.0)*r01*x1277*x1278))+((x1284*x1295))+(((-1.0)*cj5*x1273*x1279))+((r11*sj5*x1279)));
evalcond[6]=((((-0.29035)*cj1))+(((-1.0)*x1286*x1301))+((x1289*x1302))+(((-0.04079975)*x1302))+(((0.004)*sj1))+(((-0.15775011)*x1299))+(((-1.0)*x1293*x1298))+(((-0.04079975)*x1298))+(((-0.04079975)*x1291))+pz+(((-8.58978361288802e-7)*x1287))+(((-8.58978361288802e-7)*x1281))+((r21*x1283))+(((0.15775011)*x1304))+((x1289*x1298)));
evalcond[7]=((0.046)+(((-8.58978361288802e-7)*x1297))+(((-0.15775011)*x1302))+(((-8.58978361288802e-7)*sj0*x1280))+(((-8.58978361288802e-7)*r01*x1277))+(((-8.58978361288802e-7)*r11*x1290))+(((-1.0)*x1289*x1299))+(((-1.0)*x1286*x1303))+((x1293*x1299))+((x1289*x1304))+(((-0.04079975)*x1304))+((x1283*x1284))+(((-0.15775011)*x1298))+(((0.04079975)*x1299))+(((0.004)*cj1))+(((0.29035)*sj1))+(((-0.04079975)*r10*x1290))+((cj0*px))+((py*sj0))+((x1283*x1296))+(((-0.04079975)*r00*x1277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1305=(cj4*sj5);
IkReal x1306=(cj1*r21);
IkReal x1307=(cj3*r20);
IkReal x1308=((9.10415855677118e-6)*sj1);
IkReal x1309=(cj4*r20);
IkReal x1310=((9.10415855677118e-6)*cj1);
IkReal x1311=(cj3*sj1);
IkReal x1312=(r21*sj4);
IkReal x1313=(sj1*sj4);
IkReal x1314=((0.999999999958557)*r22);
IkReal x1315=((9.10415855677118e-6)*cj5);
IkReal x1316=(cj3*cj4);
IkReal x1317=((1.0)*cj1*cj5);
IkReal x1318=(cj4*x1314);
IkReal x1319=(r20*sj4*sj5);
CheckValue<IkReal> x1320 = IKatan2WithCheck(IkReal((((x1311*x1318))+(((-1.0)*cj5*r21*x1308*x1316))+(((-1.0)*sj5*x1311*x1312))+((x1305*x1306))+(((-1.0)*x1305*x1307*x1308))+(((-1.0)*sj4*x1306*x1315))+((cj1*sj4*x1314))+(((-1.0)*x1310*x1319))+((cj5*x1307*x1313))+(((-1.0)*x1309*x1317)))),IkReal((((x1313*x1314))+(((-1.0)*x1308*x1319))+((r21*sj1*x1305))+((x1306*x1315*x1316))+((cj3*sj4*sj5*x1306))+(((-1.0)*sj4*x1307*x1317))+(((-1.0)*cj5*x1308*x1312))+(((-1.0)*cj5*sj1*x1309))+(((-1.0)*cj1*x1314*x1316))+((x1305*x1307*x1310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1320.valid){
continue;
}
CheckValue<IkReal> x1321=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1321.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1320.value)+(((1.5707963267949)*(x1321.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1322=IKsin(j2);
IkReal x1323=IKcos(j2);
IkReal x1324=((0.999999999958557)*cj4);
IkReal x1325=(r12*sj0);
IkReal x1326=((1.0)*r10);
IkReal x1327=(cj0*r02);
IkReal x1328=((0.999999999958557)*sj4);
IkReal x1329=((9.10415855677118e-6)*r11);
IkReal x1330=(cj0*cj5);
IkReal x1331=((9.10415855677118e-6)*sj4);
IkReal x1332=(cj4*sj0);
IkReal x1333=(r10*sj5);
IkReal x1334=(cj5*r21);
IkReal x1335=((1.0)*cj1);
IkReal x1336=((0.04079975)*sj5);
IkReal x1337=(cj0*r01);
IkReal x1338=((1.0)*cj4);
IkReal x1339=((1.1e-7)*cj1);
IkReal x1340=(r20*sj5);
IkReal x1341=((9.10415855677118e-6)*cj4);
IkReal x1342=((0.042)*cj3);
IkReal x1343=(cj5*sj0);
IkReal x1344=(cj5*r20);
IkReal x1345=((1.0)*sj4);
IkReal x1346=((1.1e-7)*sj3);
IkReal x1347=(sj4*sj5);
IkReal x1348=(cj4*sj5);
IkReal x1349=(r11*sj0);
IkReal x1350=(cj0*r00*sj5);
IkReal x1351=(sj1*x1323);
IkReal x1352=(sj1*x1322);
IkReal x1353=(sj4*x1343);
IkReal x1354=(sj3*x1322);
IkReal x1355=(cj1*x1322);
IkReal x1356=(sj3*x1323);
IkReal x1357=(cj1*x1323);
evalcond[0]=((((-0.999999999958557)*x1334))+(((-1.0)*x1335*x1354))+(((-9.10415855677118e-6)*r22))+(((-1.0)*sj3*x1351))+(((-0.999999999958557)*x1340)));
evalcond[1]=(x1352+(((-1.0)*r22*x1324))+(((-1.0)*x1323*x1335))+((x1340*x1341))+((x1334*x1341))+((r21*x1347))+(((-1.0)*x1344*x1345)));
evalcond[2]=((((-1.0)*x1331*x1340))+(((-1.0)*x1338*x1344))+((r22*x1328))+(((-1.0)*cj3*x1322*x1335))+(((-1.0)*x1331*x1334))+(((-1.0)*cj3*x1351))+((r21*x1348)));
evalcond[3]=((((-1.0)*x1335*x1356))+(((-0.999999999958557)*r11*x1343))+(((-0.999999999958557)*sj0*x1333))+(((-0.999999999958557)*x1350))+(((-9.10415855677118e-6)*x1325))+(((-9.10415855677118e-6)*x1327))+((sj3*x1352))+(((-0.999999999958557)*r01*x1330)));
evalcond[4]=((((-1.0)*r00*x1330*x1345))+x1351+x1355+(((9.10415855677118e-6)*x1332*x1333))+(((-1.0)*x1324*x1327))+(((-1.0)*x1324*x1325))+((x1347*x1349))+((x1337*x1347))+((x1341*x1350))+(((-1.0)*x1326*x1353))+((cj5*x1329*x1332))+((r01*x1330*x1341)));
evalcond[5]=((((-1.0)*x1329*x1353))+((r11*sj5*x1332))+(((-1.0)*r00*x1330*x1338))+(((-1.0)*x1331*x1350))+((x1327*x1328))+(((-1.0)*cj3*x1323*x1335))+((x1337*x1348))+(((-1.0)*cj5*x1326*x1332))+((x1325*x1328))+((cj3*x1352))+(((-1.0)*sj0*x1331*x1333))+(((-1.0)*r01*x1330*x1331)));
evalcond[6]=((((-0.15775011)*x1352))+(((-0.29035)*cj1))+(((-8.58978361288802e-7)*x1340))+(((-0.04079975)*x1344))+(((-1.0)*x1346*x1351))+(((-0.04079975)*x1355))+(((-0.04079975)*x1351))+((x1342*x1351))+((x1342*x1355))+(((0.15775011)*x1357))+(((-1.0)*x1339*x1354))+((r21*x1336))+(((0.004)*sj1))+pz+(((-8.58978361288802e-7)*x1334)));
evalcond[7]=((0.046)+(((-0.15775011)*x1355))+(((-0.15775011)*x1351))+((x1336*x1337))+(((-0.04079975)*r10*x1343))+(((-8.58978361288802e-7)*x1350))+(((0.04079975)*x1352))+(((-0.04079975)*x1357))+(((-8.58978361288802e-7)*r11*x1343))+((x1342*x1357))+(((-1.0)*x1339*x1356))+((x1346*x1352))+(((-0.04079975)*r00*x1330))+((x1336*x1349))+(((0.004)*cj1))+(((0.29035)*sj1))+((cj0*px))+(((-1.0)*x1342*x1352))+((py*sj0))+(((-8.58978361288802e-7)*r01*x1330))+(((-8.58978361288802e-7)*sj0*x1333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1358=(cj4*sj3);
IkReal x1359=((0.999999999958557)*sj1);
IkReal x1360=((9.10415855677118e-6)*cj1);
IkReal x1361=(cj5*r21);
IkReal x1362=(r20*sj5);
IkReal x1363=((9.10415855677118e-6)*sj1);
IkReal x1364=(sj3*sj4);
IkReal x1365=(r21*sj5);
IkReal x1366=(cj5*r20);
IkReal x1367=((0.999999999958557)*cj1);
CheckValue<IkReal> x1368 = IKatan2WithCheck(IkReal((((r22*x1358*x1359))+(((-1.0)*sj1*x1364*x1365))+(((-1.0)*x1358*x1361*x1363))+(((-1.0)*r22*x1360))+(((-1.0)*x1362*x1367))+(((-1.0)*x1358*x1362*x1363))+(((-1.0)*x1361*x1367))+((sj1*x1364*x1366)))),IkReal(((((-1.0)*r22*x1358*x1367))+((cj1*x1364*x1365))+((x1358*x1360*x1362))+((x1358*x1360*x1361))+(((-1.0)*x1359*x1362))+(((-1.0)*x1359*x1361))+(((-1.0)*r22*x1363))+(((-1.0)*cj1*x1364*x1366)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1368.valid){
continue;
}
CheckValue<IkReal> x1369=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1369.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1368.value)+(((1.5707963267949)*(x1369.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1370=IKsin(j2);
IkReal x1371=IKcos(j2);
IkReal x1372=((0.999999999958557)*cj4);
IkReal x1373=(r12*sj0);
IkReal x1374=((1.0)*r10);
IkReal x1375=(cj0*r02);
IkReal x1376=((0.999999999958557)*sj4);
IkReal x1377=((9.10415855677118e-6)*r11);
IkReal x1378=(cj0*cj5);
IkReal x1379=((9.10415855677118e-6)*sj4);
IkReal x1380=(cj4*sj0);
IkReal x1381=(r10*sj5);
IkReal x1382=(cj5*r21);
IkReal x1383=((1.0)*cj1);
IkReal x1384=((0.04079975)*sj5);
IkReal x1385=(cj0*r01);
IkReal x1386=((1.0)*cj4);
IkReal x1387=((1.1e-7)*cj1);
IkReal x1388=(r20*sj5);
IkReal x1389=((9.10415855677118e-6)*cj4);
IkReal x1390=((0.042)*cj3);
IkReal x1391=(cj5*sj0);
IkReal x1392=(cj5*r20);
IkReal x1393=((1.0)*sj4);
IkReal x1394=((1.1e-7)*sj3);
IkReal x1395=(sj4*sj5);
IkReal x1396=(cj4*sj5);
IkReal x1397=(r11*sj0);
IkReal x1398=(cj0*r00*sj5);
IkReal x1399=(sj1*x1371);
IkReal x1400=(sj1*x1370);
IkReal x1401=(sj4*x1391);
IkReal x1402=(sj3*x1370);
IkReal x1403=(cj1*x1370);
IkReal x1404=(sj3*x1371);
IkReal x1405=(cj1*x1371);
evalcond[0]=((((-1.0)*sj3*x1399))+(((-9.10415855677118e-6)*r22))+(((-1.0)*x1383*x1402))+(((-0.999999999958557)*x1388))+(((-0.999999999958557)*x1382)));
evalcond[1]=((((-1.0)*x1392*x1393))+((x1388*x1389))+((r21*x1395))+(((-1.0)*r22*x1372))+x1400+(((-1.0)*x1371*x1383))+((x1382*x1389)));
evalcond[2]=((((-1.0)*cj3*x1399))+(((-1.0)*cj3*x1370*x1383))+((r21*x1396))+((r22*x1376))+(((-1.0)*x1386*x1392))+(((-1.0)*x1379*x1382))+(((-1.0)*x1379*x1388)));
evalcond[3]=(((sj3*x1400))+(((-0.999999999958557)*sj0*x1381))+(((-1.0)*x1383*x1404))+(((-9.10415855677118e-6)*x1375))+(((-9.10415855677118e-6)*x1373))+(((-0.999999999958557)*x1398))+(((-0.999999999958557)*r01*x1378))+(((-0.999999999958557)*r11*x1391)));
evalcond[4]=(x1399+(((-1.0)*r00*x1378*x1393))+(((-1.0)*x1372*x1373))+(((-1.0)*x1372*x1375))+((x1395*x1397))+(((-1.0)*x1374*x1401))+(((9.10415855677118e-6)*x1380*x1381))+((r01*x1378*x1389))+x1403+((cj5*x1377*x1380))+((x1389*x1398))+((x1385*x1395)));
evalcond[5]=((((-1.0)*cj5*x1374*x1380))+((x1375*x1376))+(((-1.0)*cj3*x1371*x1383))+(((-1.0)*r00*x1378*x1386))+(((-1.0)*x1377*x1401))+(((-1.0)*sj0*x1379*x1381))+((x1385*x1396))+(((-1.0)*r01*x1378*x1379))+((cj3*x1400))+((r11*sj5*x1380))+(((-1.0)*x1379*x1398))+((x1373*x1376)));
evalcond[6]=((((-0.29035)*cj1))+(((-0.04079975)*x1399))+(((-0.04079975)*x1392))+(((-8.58978361288802e-7)*x1388))+(((-8.58978361288802e-7)*x1382))+(((-1.0)*x1394*x1399))+((r21*x1384))+(((0.15775011)*x1405))+((x1390*x1399))+(((0.004)*sj1))+pz+(((-0.15775011)*x1400))+((x1390*x1403))+(((-1.0)*x1387*x1402))+(((-0.04079975)*x1403)));
evalcond[7]=((0.046)+(((-0.04079975)*r10*x1391))+(((-0.04079975)*r00*x1378))+(((-1.0)*x1390*x1400))+(((-8.58978361288802e-7)*x1398))+(((-8.58978361288802e-7)*r01*x1378))+(((-8.58978361288802e-7)*sj0*x1381))+((x1394*x1400))+(((-8.58978361288802e-7)*r11*x1391))+(((-0.15775011)*x1399))+(((0.004)*cj1))+(((0.29035)*sj1))+((x1384*x1385))+(((-0.15775011)*x1403))+((x1384*x1397))+((cj0*px))+(((0.04079975)*x1400))+((py*sj0))+((x1390*x1405))+(((-1.0)*x1387*x1404))+(((-0.04079975)*x1405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1406=cj1*cj1;
IkReal x1407=(r22*sj1);
IkReal x1408=((0.157750109993462)*cj1);
IkReal x1409=(cj5*r21);
IkReal x1410=(sj1*sj3);
IkReal x1411=(cj0*px);
IkReal x1412=(cj1*r22);
IkReal x1413=(r20*sj5);
IkReal x1414=((3.8237465938439e-7)*cj3);
IkReal x1415=(cj1*sj3);
IkReal x1416=((0.0407997499983091)*cj1);
IkReal x1417=((0.0407997499983091)*sj1);
IkReal x1418=(py*sj0);
IkReal x1419=(cj0*r00);
IkReal x1420=((0.04079975)*cj5);
IkReal x1421=((8.58978361288802e-7)*sj5);
IkReal x1422=(r10*sj0);
IkReal x1423=((0.29035)*sj3);
IkReal x1424=((0.157750109993462)*sj1);
IkReal x1425=((0.04079975)*sj5);
IkReal x1426=(cj0*r01);
IkReal x1427=(r11*sj0);
IkReal x1428=((8.58978361288802e-7)*cj5);
IkReal x1429=((1.00145744124483e-12)*sj3);
IkReal x1430=((0.0419999999982594)*cj3*sj1);
IkReal x1431=((0.0419999999982594)*cj1*cj3);
IkReal x1432=(x1426*x1428);
IkReal x1433=(x1421*x1422);
CheckValue<IkReal> x1434=IKPowWithIntegerCheck(IKsign(((-1.1e-7)+(((0.042)*cj3*sj3))+(((1.1e-7)*(cj3*cj3)))+(((-0.04079975)*sj3)))),-1);
if(!x1434.valid){
continue;
}
CheckValue<IkReal> x1435 = IKatan2WithCheck(IkReal((((x1413*x1416))+(((-1.0)*x1412*x1414))+((x1409*x1424))+(((-1.0)*x1410*x1420*x1422))+(((1.09999999995441e-7)*x1409*x1415))+(((0.004)*cj1*x1410))+(((1.4361820137881e-6)*x1407))+(((-1.0)*x1413*x1431))+(((-1.0)*x1410*x1432))+(((-1.0)*x1410*x1433))+(((1.09999999995441e-7)*x1413*x1415))+((x1410*x1425*x1427))+((x1410*x1425*x1426))+((x1410*x1418))+((x1410*x1411))+x1423+(((0.046)*x1410))+(((-1.0)*x1410*x1427*x1428))+(((-1.0)*x1410*x1419*x1420))+(((-1.0)*x1410*x1419*x1421))+((x1409*x1416))+(((3.71447393076625e-7)*x1412))+(((-1.0)*x1409*x1431))+(((-1.0)*x1406*x1423))+((x1412*x1429))+((x1413*x1424)))),IkReal((((x1413*x1417))+(((-1.0)*x1415*x1418))+((x1415*x1427*x1428))+((x1415*x1420*x1422))+(((-1.0)*x1411*x1415))+(((1.09999999995441e-7)*x1409*x1410))+(((-1.0)*x1413*x1430))+(((1.09999999995441e-7)*x1410*x1413))+(((-0.29035)*cj1*x1410))+(((-0.004)*sj3*x1406))+(((-1.0)*x1407*x1414))+(((-1.0)*x1408*x1413))+(((-1.0)*x1415*x1425*x1426))+(((-1.0)*x1415*x1425*x1427))+((x1407*x1429))+((x1415*x1433))+((x1415*x1432))+(((3.71447393076625e-7)*x1407))+(((-0.046)*x1415))+((x1409*x1417))+(((-1.0)*x1409*x1430))+((x1415*x1419*x1420))+((x1415*x1419*x1421))+(((-1.4361820137881e-6)*x1412))+(((-1.0)*x1408*x1409)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1435.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1434.value)))+(x1435.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1436=IKsin(j2);
IkReal x1437=IKcos(j2);
IkReal x1438=((0.04079975)*cj0);
IkReal x1439=((8.58978361288802e-7)*cj5);
IkReal x1440=((0.04079975)*sj0);
IkReal x1441=((0.042)*cj3);
IkReal x1442=((0.999999999958557)*cj5);
IkReal x1443=(r11*sj0);
IkReal x1444=((1.0)*cj1);
IkReal x1445=((1.1e-7)*sj3);
IkReal x1446=(cj0*r01);
IkReal x1447=(r20*sj5);
IkReal x1448=(cj0*r00*sj5);
IkReal x1449=(sj3*x1436);
IkReal x1450=(sj1*x1437);
IkReal x1451=(cj1*x1437);
IkReal x1452=(r10*sj0*sj5);
IkReal x1453=(cj1*x1436);
IkReal x1454=(sj1*x1436);
evalcond[0]=((((-1.0)*r21*x1442))+(((-1.0)*sj3*x1450))+(((-9.10415855677118e-6)*r22))+(((-0.999999999958557)*x1447))+(((-1.0)*x1444*x1449)));
evalcond[1]=((((-9.10415855677118e-6)*r12*sj0))+((sj1*x1449))+(((-0.999999999958557)*x1448))+(((-9.10415855677118e-6)*cj0*r02))+(((-0.999999999958557)*x1452))+(((-1.0)*x1442*x1443))+(((-1.0)*x1442*x1446))+(((-1.0)*sj3*x1437*x1444)));
evalcond[2]=((((-0.04079975)*x1450))+(((-0.04079975)*x1453))+(((-0.29035)*cj1))+(((-1.0)*x1445*x1450))+(((-1.0)*x1445*x1453))+(((-0.04079975)*cj5*r20))+(((0.15775011)*x1451))+(((0.004)*sj1))+pz+(((0.04079975)*r21*sj5))+(((-1.0)*r21*x1439))+((x1441*x1450))+((x1441*x1453))+(((-0.15775011)*x1454))+(((-8.58978361288802e-7)*x1447)));
evalcond[3]=((0.046)+((r01*sj5*x1438))+(((-1.0)*cj5*r00*x1438))+(((-0.04079975)*x1451))+((x1445*x1454))+(((-1.0)*cj5*r10*x1440))+(((-1.0)*x1441*x1454))+((r11*sj5*x1440))+(((-1.0)*x1445*x1451))+(((-1.0)*x1439*x1446))+(((-1.0)*x1439*x1443))+(((0.004)*cj1))+(((0.29035)*sj1))+((cj0*px))+((py*sj0))+((x1441*x1451))+(((-0.15775011)*x1453))+(((-0.15775011)*x1450))+(((-8.58978361288802e-7)*x1452))+(((0.04079975)*x1454))+(((-8.58978361288802e-7)*x1448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x1455=(r12*sj0);
IkReal x1456=((0.999999999958557)*sj5);
IkReal x1457=(cj0*r00);
IkReal x1458=(r10*sj0);
IkReal x1459=((109839.914773322)*cj5);
IkReal x1460=(cj0*r01);
IkReal x1461=((109839.914773322)*sj5);
IkReal x1462=(r11*sj0);
IkReal x1463=((0.999999999958557)*cj5);
IkReal x1464=(cj0*r02);
j4eval[0]=((((-1.0)*x1458*x1461))+(((-1.0)*x1455))+(((-1.0)*x1459*x1462))+(((-1.0)*x1459*x1460))+(((-1.0)*x1457*x1461))+(((-1.0)*x1464)));
j4eval[1]=IKsign(((((-9.10415855677118e-6)*x1464))+(((-9.10415855677118e-6)*x1455))+(((-1.0)*x1462*x1463))+(((-1.0)*x1460*x1463))+(((-1.0)*x1456*x1457))+(((-1.0)*x1456*x1458))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1465=cj5*cj5;
IkReal x1466=r21*r21;
IkReal x1467=r20*r20;
IkReal x1468=r22*r22;
IkReal x1469=(r20*sj5);
IkReal x1470=((219679.829546644)*r22);
IkReal x1471=(cj5*r21);
IkReal x1472=((1.82083171127878e-5)*r22);
IkReal x1473=((12064806877.4106)*x1465);
IkReal x1474=((0.999999999917114)*x1465);
j4eval[0]=(((x1466*x1473))+((x1470*x1471))+(((-12064806878.4106)*x1466))+(((-12064806877.4106)*x1468))+(((-1.0)*x1467*x1473))+(((24129613754.8213)*x1469*x1471))+(((-1.0)*x1467))+((x1469*x1470)));
j4eval[1]=IKsign((((x1466*x1474))+((x1471*x1472))+(((1.99999999983423)*x1469*x1471))+(((-0.999999999917114)*x1468))+(((-1.0)*x1467*x1474))+(((-8.28857030268299e-11)*x1467))+(((-1.0)*x1466))+((x1469*x1472))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1475=cj5*cj5;
IkReal x1476=(r02*sj0);
IkReal x1477=((12064806877.4106)*r22);
IkReal x1478=(cj0*r12);
IkReal x1479=((0.999999999917114)*r22);
IkReal x1480=(r20*sj5);
IkReal x1481=(r01*r21);
IkReal x1482=(r00*r20);
IkReal x1483=((9.10415855639388e-6)*r22);
IkReal x1484=((109839.914773322)*r22);
IkReal x1485=(r10*sj5);
IkReal x1486=((1.0)*sj0);
IkReal x1487=(cj5*r21);
IkReal x1488=((9.10415855639388e-6)*x1487);
IkReal x1489=(cj5*r01*sj0);
IkReal x1490=((12064806877.4106)*cj0*cj5);
IkReal x1491=(cj0*r10*r20);
IkReal x1492=((12064806877.4106)*x1475);
IkReal x1493=((109839.914773322)*x1487);
IkReal x1494=((0.999999999917114)*cj0*r11);
IkReal x1495=(cj0*r11*r21);
IkReal x1496=(r00*sj0*sj5);
IkReal x1497=(cj0*cj5*r11);
IkReal x1498=((0.999999999917114)*sj0*x1475);
j4eval[0]=((((12064806877.4106)*x1487*x1496))+((x1476*x1493))+(((-1.0)*x1482*x1486))+(((-109839.914773322)*x1478*x1480))+(((-1.0)*r11*x1480*x1490))+(((-1.0)*x1476*x1477))+(((12064806878.4106)*x1495))+(((-1.0)*x1484*x1497))+(((109839.914773322)*x1476*x1480))+(((-1.0)*x1492*x1495))+((x1491*x1492))+((x1484*x1496))+((x1484*x1489))+x1491+((x1477*x1478))+(((-1.0)*cj0*x1484*x1485))+(((-1.0)*sj0*x1482*x1492))+(((12064806877.4106)*x1480*x1489))+(((-12064806878.4106)*sj0*x1481))+((sj0*x1481*x1492))+(((-12064806877.4106)*cj0*x1485*x1487))+(((-1.0)*x1478*x1493)));
j4eval[1]=IKsign(((((0.999999999917114)*x1487*x1496))+(((8.28857030268299e-11)*x1491))+((x1478*x1479))+((x1476*x1488))+(((-1.0)*x1482*x1498))+(((0.999999999917114)*x1480*x1489))+(((-1.0)*x1481*x1486))+(((-1.0)*r21*x1475*x1494))+((x1481*x1498))+(((-1.0)*x1476*x1479))+(((0.999999999917114)*x1475*x1491))+(((-9.10415855639388e-6)*x1478*x1480))+((x1483*x1489))+(((-1.0)*cj5*x1480*x1494))+((x1483*x1496))+x1495+(((-1.0)*x1483*x1497))+(((-8.28857030268299e-11)*sj0*x1482))+(((-1.0)*cj0*x1483*x1485))+(((-0.999999999917114)*cj0*x1485*x1487))+(((-1.0)*x1478*x1488))+(((9.10415855639388e-6)*x1476*x1480))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1499=cj5*cj5;
IkReal x1500=(cj0*r12);
IkReal x1501=((0.999999999917114)*r22);
IkReal x1502=(r21*sj0);
IkReal x1503=((9.10415855639388e-6)*cj5);
IkReal x1504=(cj2*sj1);
IkReal x1505=(r20*sj0);
IkReal x1506=(cj5*r01);
IkReal x1507=((0.999999999917114)*sj5);
IkReal x1508=((9.10415855639388e-6)*sj5);
IkReal x1509=(r22*sj0);
IkReal x1510=(cj1*sj2);
IkReal x1511=((0.999999999958557)*cj3);
IkReal x1512=(cj0*r11);
IkReal x1513=((9.10415855677118e-6)*cj3);
IkReal x1514=(cj0*r10);
IkReal x1515=((1.0)*r01);
IkReal x1516=(cj3*sj5);
IkReal x1517=(r02*sj0);
IkReal x1518=(cj5*r00);
IkReal x1519=(cj3*sj0);
IkReal x1520=((0.999999999917114)*x1499);
IkReal x1521=(r00*sj0*sj5);
IkReal x1522=((1.0)*cj3*cj5);
IkReal x1523=(sj5*x1513*x1514);
CheckValue<IkReal> x1524=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1512*x1520))+((r02*x1505*x1508))+((r00*x1508*x1509))+(((-1.0)*cj5*r21*x1507*x1514))+((r02*x1502*x1503))+(((-1.0)*r21*x1500*x1503))+((r01*x1502*x1520))+(((-1.0)*x1501*x1517))+((r01*x1503*x1509))+((x1505*x1506*x1507))+(((-1.0)*r22*x1503*x1512))+(((8.28857030268299e-11)*r20*x1514))+(((-1.0)*r20*x1500*x1508))+(((-1.0)*cj5*r20*x1507*x1512))+((x1500*x1501))+((x1502*x1507*x1518))+(((-1.0)*r22*x1508*x1514))+((r20*x1514*x1520))+((r21*x1512))+(((-8.28857030268299e-11)*r00*x1505))+(((-1.0)*x1502*x1515))+(((-1.0)*r00*x1505*x1520)))),-1);
if(!x1524.valid){
continue;
}
CheckValue<IkReal> x1525 = IKatan2WithCheck(IkReal((((sj0*x1504*x1506*x1513))+((sj0*x1506*x1510*x1513))+((x1500*x1504*x1511))+(((-1.0)*x1504*x1511*x1517))+(((-1.0)*x1504*x1523))+((x1504*x1513*x1521))+(((-1.0)*x1510*x1523))+(((-1.0)*x1510*x1511*x1517))+((x1510*x1513*x1521))+(((-1.0)*cj5*x1510*x1512*x1513))+((x1500*x1510*x1511))+(((-1.0)*cj5*x1504*x1512*x1513)))),IkReal(((((-1.0)*sj0*x1504*x1515*x1516))+((x1504*x1518*x1519))+((x1504*x1512*x1516))+((x1510*x1512*x1516))+((x1510*x1518*x1519))+(((-1.0)*sj0*x1510*x1515*x1516))+(((-1.0)*x1504*x1514*x1522))+(((-1.0)*x1510*x1514*x1522)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1524.value)))+(x1525.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1526=IKcos(j4);
IkReal x1527=IKsin(j4);
IkReal x1528=((9.10415855677118e-6)*cj5);
IkReal x1529=(r11*sj5);
IkReal x1530=((0.999999999958557)*r02);
IkReal x1531=((0.999999999958557)*r12);
IkReal x1532=((1.0)*cj2);
IkReal x1533=(cj3*sj1);
IkReal x1534=(cj0*r00);
IkReal x1535=((9.10415855677118e-6)*sj5);
IkReal x1536=(cj1*cj3);
IkReal x1537=(cj5*r00);
IkReal x1538=((0.999999999958557)*r22);
IkReal x1539=((1.0)*cj5);
IkReal x1540=(r01*sj5);
IkReal x1541=(sj0*x1527);
IkReal x1542=(r10*x1535);
IkReal x1543=(cj0*x1527);
IkReal x1544=(r21*x1526);
IkReal x1545=(cj0*x1526);
IkReal x1546=(r20*x1527);
IkReal x1547=((1.0)*x1540);
IkReal x1548=(sj0*x1526);
IkReal x1549=(r21*x1527);
IkReal x1550=(x1526*x1539);
evalcond[0]=(((x1528*x1544))+((r20*x1526*x1535))+((sj1*sj2))+(((-1.0)*x1539*x1546))+((sj5*x1549))+(((-1.0)*x1526*x1538))+(((-1.0)*cj1*x1532)));
evalcond[1]=((((-1.0)*x1535*x1546))+(((-1.0)*x1532*x1533))+((x1527*x1538))+(((-1.0)*sj2*x1536))+(((-1.0)*r20*x1550))+((sj5*x1544))+(((-1.0)*x1528*x1549)));
evalcond[2]=(((r11*x1528*x1545))+(((-1.0)*r10*x1539*x1543))+((x1530*x1548))+(((-1.0)*r00*x1535*x1548))+((x1537*x1541))+(((-1.0)*r01*x1528*x1548))+(((-1.0)*x1531*x1545))+((x1529*x1543))+((x1542*x1545))+(((-1.0)*x1541*x1547)));
evalcond[3]=((((-1.0)*r10*x1539*x1545))+((x1531*x1543))+(((-1.0)*sj3))+(((-1.0)*r11*x1528*x1543))+((x1537*x1548))+(((-1.0)*x1530*x1541))+((r01*x1528*x1541))+((x1529*x1545))+(((-1.0)*x1547*x1548))+((r00*x1535*x1541))+(((-1.0)*x1542*x1543)));
evalcond[4]=(((x1526*x1534*x1535))+((r11*x1528*x1548))+((cj2*sj1))+(((-1.0)*r10*x1539*x1541))+(((-1.0)*x1527*x1534*x1539))+((cj1*sj2))+(((-1.0)*x1530*x1545))+(((-1.0)*x1531*x1548))+((r01*x1528*x1545))+((x1529*x1541))+((x1540*x1543))+((x1542*x1548)));
evalcond[5]=((((-1.0)*r10*x1539*x1548))+((x1530*x1543))+((x1531*x1541))+(((-1.0)*r11*x1528*x1541))+((sj2*x1533))+(((-1.0)*x1527*x1534*x1535))+(((-1.0)*x1532*x1536))+(((-1.0)*r01*x1528*x1543))+((x1529*x1548))+((x1540*x1545))+(((-1.0)*x1534*x1550))+(((-1.0)*x1541*x1542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1551=cj5*cj5;
IkReal x1552=r20*r20;
IkReal x1553=r21*r21;
IkReal x1554=(cj2*sj1);
IkReal x1555=(cj1*sj2);
IkReal x1556=((9.10415855677118e-6)*cj5);
IkReal x1557=((9.10415855677118e-6)*r20);
IkReal x1558=(cj5*r20);
IkReal x1559=(sj1*sj2);
IkReal x1560=(cj1*cj2);
IkReal x1561=((1.82083171127878e-5)*r22);
IkReal x1562=((0.999999999958557)*r22);
IkReal x1563=(cj3*r21);
IkReal x1564=(r21*x1559);
IkReal x1565=(sj5*x1560);
IkReal x1566=(cj3*x1562);
IkReal x1567=((0.999999999917114)*x1551);
IkReal x1568=(cj3*sj5*x1557);
IkReal x1569=((1.0)*sj5*x1563);
CheckValue<IkReal> x1570=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1553))+(((-1.0)*x1552*x1567))+((x1553*x1567))+((r20*sj5*x1561))+((cj5*r21*x1561))+(((-8.28857030268299e-11)*x1552))+(((1.99999999983423)*r21*sj5*x1558))+(((-0.999999999917114)*(r22*r22))))),-1);
if(!x1570.valid){
continue;
}
CheckValue<IkReal> x1571 = IKatan2WithCheck(IkReal((((x1555*x1568))+(((-1.0)*x1555*x1566))+((x1554*x1556*x1563))+(((-1.0)*r21*x1565))+((x1554*x1568))+((x1555*x1556*x1563))+(((-1.0)*x1558*x1559))+((sj5*x1564))+(((-1.0)*x1554*x1566))+((x1558*x1560)))),IkReal((((x1560*x1562))+(((-1.0)*x1559*x1562))+((x1556*x1564))+(((-1.0)*x1555*x1569))+((cj3*x1555*x1558))+((sj5*x1557*x1559))+(((-1.0)*x1557*x1565))+((cj3*x1554*x1558))+(((-1.0)*x1554*x1569))+(((-1.0)*r21*x1556*x1560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1570.value)))+(x1571.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1572=IKcos(j4);
IkReal x1573=IKsin(j4);
IkReal x1574=((9.10415855677118e-6)*cj5);
IkReal x1575=(r11*sj5);
IkReal x1576=((0.999999999958557)*r02);
IkReal x1577=((0.999999999958557)*r12);
IkReal x1578=((1.0)*cj2);
IkReal x1579=(cj3*sj1);
IkReal x1580=(cj0*r00);
IkReal x1581=((9.10415855677118e-6)*sj5);
IkReal x1582=(cj1*cj3);
IkReal x1583=(cj5*r00);
IkReal x1584=((0.999999999958557)*r22);
IkReal x1585=((1.0)*cj5);
IkReal x1586=(r01*sj5);
IkReal x1587=(sj0*x1573);
IkReal x1588=(r10*x1581);
IkReal x1589=(cj0*x1573);
IkReal x1590=(r21*x1572);
IkReal x1591=(cj0*x1572);
IkReal x1592=(r20*x1573);
IkReal x1593=((1.0)*x1586);
IkReal x1594=(sj0*x1572);
IkReal x1595=(r21*x1573);
IkReal x1596=(x1572*x1585);
evalcond[0]=((((-1.0)*x1572*x1584))+(((-1.0)*x1585*x1592))+((r20*x1572*x1581))+((sj1*sj2))+(((-1.0)*cj1*x1578))+((x1574*x1590))+((sj5*x1595)));
evalcond[1]=((((-1.0)*x1578*x1579))+((x1573*x1584))+(((-1.0)*x1581*x1592))+(((-1.0)*x1574*x1595))+(((-1.0)*r20*x1596))+(((-1.0)*sj2*x1582))+((sj5*x1590)));
evalcond[2]=(((x1588*x1591))+(((-1.0)*x1577*x1591))+((x1576*x1594))+((x1575*x1589))+((r11*x1574*x1591))+(((-1.0)*r01*x1574*x1594))+((x1583*x1587))+(((-1.0)*r10*x1585*x1589))+(((-1.0)*r00*x1581*x1594))+(((-1.0)*x1587*x1593)));
evalcond[3]=((((-1.0)*sj3))+((r01*x1574*x1587))+(((-1.0)*x1593*x1594))+((x1575*x1591))+((x1583*x1594))+(((-1.0)*x1588*x1589))+((x1577*x1589))+(((-1.0)*r11*x1574*x1589))+((r00*x1581*x1587))+(((-1.0)*r10*x1585*x1591))+(((-1.0)*x1576*x1587)));
evalcond[4]=(((x1586*x1589))+((cj2*sj1))+(((-1.0)*x1573*x1580*x1585))+((r01*x1574*x1591))+((x1572*x1580*x1581))+((x1588*x1594))+(((-1.0)*x1577*x1594))+((cj1*sj2))+((x1575*x1587))+((r11*x1574*x1594))+(((-1.0)*r10*x1585*x1587))+(((-1.0)*x1576*x1591)));
evalcond[5]=(((x1586*x1591))+(((-1.0)*x1580*x1596))+(((-1.0)*x1573*x1580*x1581))+(((-1.0)*x1578*x1582))+((x1576*x1589))+((x1575*x1594))+(((-1.0)*r01*x1574*x1589))+((x1577*x1587))+(((-1.0)*r11*x1574*x1587))+(((-1.0)*r10*x1585*x1594))+((sj2*x1579))+(((-1.0)*x1587*x1588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1597=(sj1*sj2);
IkReal x1598=(r01*sj0);
IkReal x1599=(cj1*cj2);
IkReal x1600=((0.999999999958557)*cj0);
IkReal x1601=(r00*sj5);
IkReal x1602=(cj0*cj5);
IkReal x1603=((9.10415855677118e-6)*r11);
IkReal x1604=(cj5*sj0);
IkReal x1605=((0.999999999958557)*sj0);
IkReal x1606=((9.10415855677118e-6)*cj5);
IkReal x1607=(r10*sj5);
IkReal x1608=((9.10415855677118e-6)*sj0);
IkReal x1609=((9.10415855677118e-6)*cj0);
IkReal x1610=((1.0)*sj5);
IkReal x1611=(cj0*r11);
IkReal x1612=(r12*x1600);
CheckValue<IkReal> x1613=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01*x1600))+(((-1.0)*x1600*x1601))+(((-0.999999999958557)*r11*x1604))+(((-1.0)*x1605*x1607))+(((-1.0)*r02*x1609))+(((-1.0)*r12*x1608)))),-1);
if(!x1613.valid){
continue;
}
CheckValue<IkReal> x1614 = IKatan2WithCheck(IkReal((((x1599*x1601*x1608))+((x1597*x1607*x1609))+(((-1.0)*x1599*x1602*x1603))+((r02*x1597*x1605))+((x1599*x1612))+(((-1.0)*x1597*x1598*x1606))+(((-1.0)*x1597*x1612))+(((-1.0)*x1599*x1607*x1609))+(((-1.0)*r02*x1599*x1605))+((x1597*x1602*x1603))+((x1598*x1599*x1606))+(((-1.0)*x1597*x1601*x1608)))),IkReal(((((-1.0)*x1597*x1610*x1611))+(((-1.0)*r10*x1599*x1602))+(((-1.0)*x1598*x1599*x1610))+((r10*x1597*x1602))+((sj5*x1599*x1611))+(((-1.0)*r00*x1597*x1604))+((r00*x1599*x1604))+((sj5*x1597*x1598)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1613.value)))+(x1614.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1615=IKcos(j4);
IkReal x1616=IKsin(j4);
IkReal x1617=((9.10415855677118e-6)*cj5);
IkReal x1618=(r11*sj5);
IkReal x1619=((0.999999999958557)*r02);
IkReal x1620=((0.999999999958557)*r12);
IkReal x1621=((1.0)*cj2);
IkReal x1622=(cj3*sj1);
IkReal x1623=(cj0*r00);
IkReal x1624=((9.10415855677118e-6)*sj5);
IkReal x1625=(cj1*cj3);
IkReal x1626=(cj5*r00);
IkReal x1627=((0.999999999958557)*r22);
IkReal x1628=((1.0)*cj5);
IkReal x1629=(r01*sj5);
IkReal x1630=(sj0*x1616);
IkReal x1631=(r10*x1624);
IkReal x1632=(cj0*x1616);
IkReal x1633=(r21*x1615);
IkReal x1634=(cj0*x1615);
IkReal x1635=(r20*x1616);
IkReal x1636=((1.0)*x1629);
IkReal x1637=(sj0*x1615);
IkReal x1638=(r21*x1616);
IkReal x1639=(x1615*x1628);
evalcond[0]=(((r20*x1615*x1624))+((sj1*sj2))+((sj5*x1638))+(((-1.0)*x1628*x1635))+((x1617*x1633))+(((-1.0)*x1615*x1627))+(((-1.0)*cj1*x1621)));
evalcond[1]=((((-1.0)*x1624*x1635))+((sj5*x1633))+(((-1.0)*x1621*x1622))+(((-1.0)*r20*x1639))+((x1616*x1627))+(((-1.0)*sj2*x1625))+(((-1.0)*x1617*x1638)));
evalcond[2]=((((-1.0)*x1620*x1634))+(((-1.0)*r00*x1624*x1637))+((x1619*x1637))+((x1618*x1632))+((r11*x1617*x1634))+(((-1.0)*r10*x1628*x1632))+(((-1.0)*r01*x1617*x1637))+(((-1.0)*x1630*x1636))+((x1631*x1634))+((x1626*x1630)));
evalcond[3]=((((-1.0)*sj3))+((x1620*x1632))+((x1618*x1634))+(((-1.0)*r10*x1628*x1634))+((r01*x1617*x1630))+(((-1.0)*x1636*x1637))+(((-1.0)*x1619*x1630))+((r00*x1624*x1630))+(((-1.0)*x1631*x1632))+(((-1.0)*r11*x1617*x1632))+((x1626*x1637)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x1620*x1637))+((cj1*sj2))+((x1618*x1630))+((x1629*x1632))+((r11*x1617*x1637))+(((-1.0)*r10*x1628*x1630))+((r01*x1617*x1634))+((x1615*x1623*x1624))+(((-1.0)*x1619*x1634))+((x1631*x1637))+(((-1.0)*x1616*x1623*x1628)));
evalcond[5]=(((x1620*x1630))+((sj2*x1622))+(((-1.0)*x1623*x1639))+((x1619*x1632))+((x1618*x1637))+((x1629*x1634))+(((-1.0)*r10*x1628*x1637))+(((-1.0)*x1621*x1625))+(((-1.0)*r01*x1617*x1632))+(((-1.0)*x1630*x1631))+(((-1.0)*x1616*x1623*x1624))+(((-1.0)*r11*x1617*x1630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1640=(r10*sj0);
IkReal x1641=((9.10415855677118e-6)*sj1);
IkReal x1642=(cj0*r00);
IkReal x1643=(r12*sj0);
IkReal x1644=((9.10415855677118e-6)*cj1);
IkReal x1645=(cj0*r01);
IkReal x1646=((9.10415855677118e-6)*cj0*r02);
IkReal x1647=((0.999999999958557)*sj1*sj5);
IkReal x1648=((0.999999999958557)*cj5*sj1);
IkReal x1649=((0.999999999958557)*cj1*cj5);
IkReal x1650=((0.999999999958557)*cj1*sj5);
IkReal x1651=((0.999999999958557)*cj5*r11*sj0);
CheckValue<IkReal> x1652=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1652.valid){
continue;
}
CheckValue<IkReal> x1653 = IKatan2WithCheck(IkReal((((x1640*x1647))+(((-1.0)*r22*x1644))+((x1645*x1648))+((x1641*x1643))+(((-1.0)*r20*x1650))+(((-1.0)*r21*x1649))+((x1642*x1647))+((cj0*r02*x1641))+((r11*sj0*x1648)))),IkReal(((((-1.0)*cj0*r02*x1644))+(((-1.0)*r11*sj0*x1649))+(((-1.0)*r22*x1641))+(((-1.0)*x1645*x1649))+(((-1.0)*x1640*x1650))+(((-1.0)*x1642*x1650))+(((-1.0)*r20*x1647))+(((-1.0)*x1643*x1644))+(((-1.0)*r21*x1648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1653.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1652.value)))+(x1653.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1654=IKsin(j2);
IkReal x1655=IKcos(j2);
IkReal x1656=((0.04079975)*cj0);
IkReal x1657=((8.58978361288802e-7)*cj5);
IkReal x1658=((0.04079975)*sj0);
IkReal x1659=((0.042)*cj3);
IkReal x1660=((0.999999999958557)*cj5);
IkReal x1661=(r11*sj0);
IkReal x1662=((1.0)*cj1);
IkReal x1663=((1.1e-7)*sj3);
IkReal x1664=(cj0*r01);
IkReal x1665=(r20*sj5);
IkReal x1666=(cj0*r00*sj5);
IkReal x1667=(sj3*x1654);
IkReal x1668=(sj1*x1655);
IkReal x1669=(cj1*x1655);
IkReal x1670=(r10*sj0*sj5);
IkReal x1671=(cj1*x1654);
IkReal x1672=(sj1*x1654);
evalcond[0]=((((-1.0)*x1662*x1667))+(((-9.10415855677118e-6)*r22))+(((-1.0)*r21*x1660))+(((-1.0)*sj3*x1668))+(((-0.999999999958557)*x1665)));
evalcond[1]=(((sj1*x1667))+(((-1.0)*sj3*x1655*x1662))+(((-9.10415855677118e-6)*r12*sj0))+(((-0.999999999958557)*x1670))+(((-9.10415855677118e-6)*cj0*r02))+(((-0.999999999958557)*x1666))+(((-1.0)*x1660*x1661))+(((-1.0)*x1660*x1664)));
evalcond[2]=((((-0.29035)*cj1))+(((-1.0)*x1663*x1671))+(((-1.0)*r21*x1657))+(((-0.04079975)*x1668))+(((-0.04079975)*cj5*r20))+(((0.004)*sj1))+(((-1.0)*x1663*x1668))+(((-0.15775011)*x1672))+(((0.15775011)*x1669))+pz+(((0.04079975)*r21*sj5))+((x1659*x1668))+(((-8.58978361288802e-7)*x1665))+(((-0.04079975)*x1671))+((x1659*x1671)));
evalcond[3]=((0.046)+(((0.04079975)*x1672))+(((-1.0)*cj5*r10*x1658))+(((-0.15775011)*x1668))+(((-1.0)*x1659*x1672))+(((-0.04079975)*x1669))+(((-8.58978361288802e-7)*x1670))+(((-1.0)*cj5*r00*x1656))+(((-1.0)*x1663*x1669))+(((-0.15775011)*x1671))+(((0.004)*cj1))+(((-1.0)*x1657*x1664))+(((-1.0)*x1657*x1661))+(((0.29035)*sj1))+((r11*sj5*x1658))+((r01*sj5*x1656))+((x1659*x1669))+(((-8.58978361288802e-7)*x1666))+((cj0*px))+((py*sj0))+((x1663*x1672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x1673=(r12*sj0);
IkReal x1674=((0.999999999958557)*sj5);
IkReal x1675=(cj0*r00);
IkReal x1676=(r10*sj0);
IkReal x1677=((109839.914773322)*cj5);
IkReal x1678=(cj0*r01);
IkReal x1679=((109839.914773322)*sj5);
IkReal x1680=(r11*sj0);
IkReal x1681=((0.999999999958557)*cj5);
IkReal x1682=(cj0*r02);
j4eval[0]=((((-1.0)*x1677*x1680))+(((-1.0)*x1682))+(((-1.0)*x1673))+(((-1.0)*x1677*x1678))+(((-1.0)*x1676*x1679))+(((-1.0)*x1675*x1679)));
j4eval[1]=IKsign(((((-9.10415855677118e-6)*x1682))+(((-1.0)*x1678*x1681))+(((-9.10415855677118e-6)*x1673))+(((-1.0)*x1680*x1681))+(((-1.0)*x1674*x1675))+(((-1.0)*x1674*x1676))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1683=cj5*cj5;
IkReal x1684=r21*r21;
IkReal x1685=r20*r20;
IkReal x1686=r22*r22;
IkReal x1687=(r20*sj5);
IkReal x1688=((219679.829546644)*r22);
IkReal x1689=(cj5*r21);
IkReal x1690=((1.82083171127878e-5)*r22);
IkReal x1691=((12064806877.4106)*x1683);
IkReal x1692=((0.999999999917114)*x1683);
j4eval[0]=((((-1.0)*x1685))+(((-12064806877.4106)*x1686))+(((24129613754.8213)*x1687*x1689))+((x1688*x1689))+(((-12064806878.4106)*x1684))+((x1687*x1688))+((x1684*x1691))+(((-1.0)*x1685*x1691)));
j4eval[1]=IKsign(((((-8.28857030268299e-11)*x1685))+(((1.99999999983423)*x1687*x1689))+(((-1.0)*x1684))+((x1689*x1690))+((x1687*x1690))+((x1684*x1692))+(((-0.999999999917114)*x1686))+(((-1.0)*x1685*x1692))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1693=cj5*cj5;
IkReal x1694=(r02*sj0);
IkReal x1695=((12064806877.4106)*r22);
IkReal x1696=(cj0*r12);
IkReal x1697=((0.999999999917114)*r22);
IkReal x1698=(r20*sj5);
IkReal x1699=(r01*r21);
IkReal x1700=(r00*r20);
IkReal x1701=((9.10415855639388e-6)*r22);
IkReal x1702=((109839.914773322)*r22);
IkReal x1703=(r10*sj5);
IkReal x1704=((1.0)*sj0);
IkReal x1705=(cj5*r21);
IkReal x1706=((9.10415855639388e-6)*x1705);
IkReal x1707=(cj5*r01*sj0);
IkReal x1708=((12064806877.4106)*cj0*cj5);
IkReal x1709=(cj0*r10*r20);
IkReal x1710=((12064806877.4106)*x1693);
IkReal x1711=((109839.914773322)*x1705);
IkReal x1712=((0.999999999917114)*cj0*r11);
IkReal x1713=(cj0*r11*r21);
IkReal x1714=(r00*sj0*sj5);
IkReal x1715=(cj0*cj5*r11);
IkReal x1716=((0.999999999917114)*sj0*x1693);
j4eval[0]=((((-1.0)*x1710*x1713))+(((-12064806877.4106)*cj0*x1703*x1705))+(((12064806877.4106)*x1698*x1707))+(((-1.0)*cj0*x1702*x1703))+(((12064806877.4106)*x1705*x1714))+((x1694*x1711))+x1709+((x1709*x1710))+(((-12064806878.4106)*sj0*x1699))+((x1695*x1696))+(((-1.0)*x1694*x1695))+(((109839.914773322)*x1694*x1698))+(((-1.0)*sj0*x1700*x1710))+((sj0*x1699*x1710))+((x1702*x1714))+(((12064806878.4106)*x1713))+(((-1.0)*x1700*x1704))+((x1702*x1707))+(((-1.0)*r11*x1698*x1708))+(((-1.0)*x1702*x1715))+(((-1.0)*x1696*x1711))+(((-109839.914773322)*x1696*x1698)));
j4eval[1]=IKsign(((((-1.0)*x1701*x1715))+(((-0.999999999917114)*cj0*x1703*x1705))+(((-1.0)*r21*x1693*x1712))+(((0.999999999917114)*x1705*x1714))+((x1699*x1716))+(((-1.0)*cj5*x1698*x1712))+(((0.999999999917114)*x1698*x1707))+(((-1.0)*cj0*x1701*x1703))+x1713+((x1694*x1706))+(((-1.0)*x1699*x1704))+(((-1.0)*x1694*x1697))+(((8.28857030268299e-11)*x1709))+(((-9.10415855639388e-6)*x1696*x1698))+(((-1.0)*x1700*x1716))+((x1701*x1707))+(((0.999999999917114)*x1693*x1709))+((x1701*x1714))+(((-1.0)*x1696*x1706))+((x1696*x1697))+(((9.10415855639388e-6)*x1694*x1698))+(((-8.28857030268299e-11)*sj0*x1700))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1717=cj5*cj5;
IkReal x1718=(cj0*r12);
IkReal x1719=((0.999999999917114)*r22);
IkReal x1720=(r21*sj0);
IkReal x1721=((9.10415855639388e-6)*cj5);
IkReal x1722=(cj2*sj1);
IkReal x1723=(r20*sj0);
IkReal x1724=(cj5*r01);
IkReal x1725=((0.999999999917114)*sj5);
IkReal x1726=((9.10415855639388e-6)*sj5);
IkReal x1727=(r22*sj0);
IkReal x1728=(cj1*sj2);
IkReal x1729=((0.999999999958557)*cj3);
IkReal x1730=(cj0*r11);
IkReal x1731=((9.10415855677118e-6)*cj3);
IkReal x1732=(cj0*r10);
IkReal x1733=((1.0)*r01);
IkReal x1734=(cj3*sj5);
IkReal x1735=(r02*sj0);
IkReal x1736=(cj5*r00);
IkReal x1737=(cj3*sj0);
IkReal x1738=((0.999999999917114)*x1717);
IkReal x1739=(r00*sj0*sj5);
IkReal x1740=((1.0)*cj3*cj5);
IkReal x1741=(sj5*x1731*x1732);
CheckValue<IkReal> x1742=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21*x1725*x1732))+((r00*x1726*x1727))+((x1723*x1724*x1725))+((r20*x1732*x1738))+((r21*x1730))+((x1720*x1725*x1736))+(((8.28857030268299e-11)*r20*x1732))+(((-1.0)*x1720*x1733))+(((-1.0)*r22*x1726*x1732))+(((-1.0)*r20*x1718*x1726))+(((-8.28857030268299e-11)*r00*x1723))+(((-1.0)*r21*x1718*x1721))+(((-1.0)*r00*x1723*x1738))+(((-1.0)*r22*x1721*x1730))+((r02*x1723*x1726))+((r02*x1720*x1721))+(((-1.0)*cj5*r20*x1725*x1730))+(((-1.0)*x1719*x1735))+((x1718*x1719))+(((-1.0)*r21*x1730*x1738))+((r01*x1721*x1727))+((r01*x1720*x1738)))),-1);
if(!x1742.valid){
continue;
}
CheckValue<IkReal> x1743 = IKatan2WithCheck(IkReal((((sj0*x1722*x1724*x1731))+((x1728*x1731*x1739))+((x1722*x1731*x1739))+(((-1.0)*cj5*x1722*x1730*x1731))+(((-1.0)*x1722*x1741))+(((-1.0)*x1728*x1741))+((x1718*x1728*x1729))+(((-1.0)*x1722*x1729*x1735))+(((-1.0)*cj5*x1728*x1730*x1731))+((x1718*x1722*x1729))+((sj0*x1724*x1728*x1731))+(((-1.0)*x1728*x1729*x1735)))),IkReal(((((-1.0)*sj0*x1728*x1733*x1734))+(((-1.0)*sj0*x1722*x1733*x1734))+((x1722*x1730*x1734))+((x1728*x1730*x1734))+((x1722*x1736*x1737))+(((-1.0)*x1722*x1732*x1740))+((x1728*x1736*x1737))+(((-1.0)*x1728*x1732*x1740)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1742.value)))+(x1743.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1744=IKcos(j4);
IkReal x1745=IKsin(j4);
IkReal x1746=((9.10415855677118e-6)*cj5);
IkReal x1747=(r11*sj5);
IkReal x1748=((0.999999999958557)*r02);
IkReal x1749=((0.999999999958557)*r12);
IkReal x1750=((1.0)*cj2);
IkReal x1751=(cj3*sj1);
IkReal x1752=(cj0*r00);
IkReal x1753=((9.10415855677118e-6)*sj5);
IkReal x1754=(cj1*cj3);
IkReal x1755=(cj5*r00);
IkReal x1756=((0.999999999958557)*r22);
IkReal x1757=((1.0)*cj5);
IkReal x1758=(r01*sj5);
IkReal x1759=(sj0*x1745);
IkReal x1760=(r10*x1753);
IkReal x1761=(cj0*x1745);
IkReal x1762=(r21*x1744);
IkReal x1763=(cj0*x1744);
IkReal x1764=(r20*x1745);
IkReal x1765=((1.0)*x1758);
IkReal x1766=(sj0*x1744);
IkReal x1767=(r21*x1745);
IkReal x1768=(x1744*x1757);
evalcond[0]=(((sj5*x1767))+((sj1*sj2))+(((-1.0)*cj1*x1750))+(((-1.0)*x1757*x1764))+(((-1.0)*x1744*x1756))+((x1746*x1762))+((r20*x1744*x1753)));
evalcond[1]=((((-1.0)*x1746*x1767))+(((-1.0)*x1753*x1764))+(((-1.0)*r20*x1768))+(((-1.0)*sj2*x1754))+((x1745*x1756))+((sj5*x1762))+(((-1.0)*x1750*x1751)));
evalcond[2]=(((r11*x1746*x1763))+(((-1.0)*r10*x1757*x1761))+((x1748*x1766))+(((-1.0)*r01*x1746*x1766))+(((-1.0)*x1759*x1765))+((x1747*x1761))+((x1760*x1763))+(((-1.0)*r00*x1753*x1766))+((x1755*x1759))+(((-1.0)*x1749*x1763)));
evalcond[3]=((((-1.0)*sj3))+(((-1.0)*x1748*x1759))+(((-1.0)*r10*x1757*x1763))+((r00*x1753*x1759))+(((-1.0)*r11*x1746*x1761))+((x1755*x1766))+(((-1.0)*x1765*x1766))+(((-1.0)*x1760*x1761))+((x1749*x1761))+((x1747*x1763))+((r01*x1746*x1759)));
evalcond[4]=(((r11*x1746*x1766))+((cj2*sj1))+(((-1.0)*x1745*x1752*x1757))+((x1747*x1759))+((cj1*sj2))+((x1744*x1752*x1753))+(((-1.0)*x1748*x1763))+((r01*x1746*x1763))+((x1758*x1761))+(((-1.0)*r10*x1757*x1759))+((x1760*x1766))+(((-1.0)*x1749*x1766)));
evalcond[5]=((((-1.0)*x1752*x1768))+(((-1.0)*r10*x1757*x1766))+((x1748*x1761))+((x1749*x1759))+(((-1.0)*r01*x1746*x1761))+(((-1.0)*x1745*x1752*x1753))+(((-1.0)*x1759*x1760))+(((-1.0)*x1750*x1754))+((x1758*x1763))+((x1747*x1766))+((sj2*x1751))+(((-1.0)*r11*x1746*x1759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1769=cj5*cj5;
IkReal x1770=r20*r20;
IkReal x1771=r21*r21;
IkReal x1772=(cj2*sj1);
IkReal x1773=(cj1*sj2);
IkReal x1774=((9.10415855677118e-6)*cj5);
IkReal x1775=((9.10415855677118e-6)*r20);
IkReal x1776=(cj5*r20);
IkReal x1777=(sj1*sj2);
IkReal x1778=(cj1*cj2);
IkReal x1779=((1.82083171127878e-5)*r22);
IkReal x1780=((0.999999999958557)*r22);
IkReal x1781=(cj3*r21);
IkReal x1782=(r21*x1777);
IkReal x1783=(sj5*x1778);
IkReal x1784=(cj3*x1780);
IkReal x1785=((0.999999999917114)*x1769);
IkReal x1786=(cj3*sj5*x1775);
IkReal x1787=((1.0)*sj5*x1781);
CheckValue<IkReal> x1788=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1770*x1785))+(((-1.0)*x1771))+((r20*sj5*x1779))+((cj5*r21*x1779))+((x1771*x1785))+(((-8.28857030268299e-11)*x1770))+(((-0.999999999917114)*(r22*r22)))+(((1.99999999983423)*r21*sj5*x1776)))),-1);
if(!x1788.valid){
continue;
}
CheckValue<IkReal> x1789 = IKatan2WithCheck(IkReal(((((-1.0)*x1773*x1784))+((x1776*x1778))+((x1772*x1786))+((x1773*x1774*x1781))+((x1772*x1774*x1781))+(((-1.0)*x1772*x1784))+(((-1.0)*r21*x1783))+((x1773*x1786))+(((-1.0)*x1776*x1777))+((sj5*x1782)))),IkReal(((((-1.0)*r21*x1774*x1778))+(((-1.0)*x1773*x1787))+((cj3*x1773*x1776))+((cj3*x1772*x1776))+((x1774*x1782))+(((-1.0)*x1775*x1783))+(((-1.0)*x1777*x1780))+((sj5*x1775*x1777))+((x1778*x1780))+(((-1.0)*x1772*x1787)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1788.value)))+(x1789.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1790=IKcos(j4);
IkReal x1791=IKsin(j4);
IkReal x1792=((9.10415855677118e-6)*cj5);
IkReal x1793=(r11*sj5);
IkReal x1794=((0.999999999958557)*r02);
IkReal x1795=((0.999999999958557)*r12);
IkReal x1796=((1.0)*cj2);
IkReal x1797=(cj3*sj1);
IkReal x1798=(cj0*r00);
IkReal x1799=((9.10415855677118e-6)*sj5);
IkReal x1800=(cj1*cj3);
IkReal x1801=(cj5*r00);
IkReal x1802=((0.999999999958557)*r22);
IkReal x1803=((1.0)*cj5);
IkReal x1804=(r01*sj5);
IkReal x1805=(sj0*x1791);
IkReal x1806=(r10*x1799);
IkReal x1807=(cj0*x1791);
IkReal x1808=(r21*x1790);
IkReal x1809=(cj0*x1790);
IkReal x1810=(r20*x1791);
IkReal x1811=((1.0)*x1804);
IkReal x1812=(sj0*x1790);
IkReal x1813=(r21*x1791);
IkReal x1814=(x1790*x1803);
evalcond[0]=(((sj5*x1813))+((x1792*x1808))+((sj1*sj2))+(((-1.0)*x1803*x1810))+(((-1.0)*cj1*x1796))+(((-1.0)*x1790*x1802))+((r20*x1790*x1799)));
evalcond[1]=((((-1.0)*x1796*x1797))+(((-1.0)*x1792*x1813))+((sj5*x1808))+(((-1.0)*sj2*x1800))+((x1791*x1802))+(((-1.0)*x1799*x1810))+(((-1.0)*r20*x1814)));
evalcond[2]=((((-1.0)*r00*x1799*x1812))+((x1794*x1812))+((x1801*x1805))+((x1806*x1809))+(((-1.0)*x1805*x1811))+(((-1.0)*x1795*x1809))+(((-1.0)*r01*x1792*x1812))+((x1793*x1807))+((r11*x1792*x1809))+(((-1.0)*r10*x1803*x1807)));
evalcond[3]=((((-1.0)*sj3))+(((-1.0)*r11*x1792*x1807))+((x1795*x1807))+(((-1.0)*x1811*x1812))+(((-1.0)*x1794*x1805))+(((-1.0)*x1806*x1807))+((r00*x1799*x1805))+((x1793*x1809))+(((-1.0)*r10*x1803*x1809))+((x1801*x1812))+((r01*x1792*x1805)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x1791*x1798*x1803))+((cj1*sj2))+(((-1.0)*x1794*x1809))+((x1790*x1798*x1799))+((r11*x1792*x1812))+((x1793*x1805))+((x1806*x1812))+(((-1.0)*r10*x1803*x1805))+((x1804*x1807))+(((-1.0)*x1795*x1812))+((r01*x1792*x1809)));
evalcond[5]=(((sj2*x1797))+(((-1.0)*r01*x1792*x1807))+(((-1.0)*r11*x1792*x1805))+((x1795*x1805))+(((-1.0)*x1791*x1798*x1799))+(((-1.0)*r10*x1803*x1812))+(((-1.0)*x1796*x1800))+(((-1.0)*x1805*x1806))+((x1794*x1807))+((x1793*x1812))+(((-1.0)*x1798*x1814))+((x1804*x1809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1815=(sj1*sj2);
IkReal x1816=(r01*sj0);
IkReal x1817=(cj1*cj2);
IkReal x1818=((0.999999999958557)*cj0);
IkReal x1819=(r00*sj5);
IkReal x1820=(cj0*cj5);
IkReal x1821=((9.10415855677118e-6)*r11);
IkReal x1822=(cj5*sj0);
IkReal x1823=((0.999999999958557)*sj0);
IkReal x1824=((9.10415855677118e-6)*cj5);
IkReal x1825=(r10*sj5);
IkReal x1826=((9.10415855677118e-6)*sj0);
IkReal x1827=((9.10415855677118e-6)*cj0);
IkReal x1828=((1.0)*sj5);
IkReal x1829=(cj0*r11);
IkReal x1830=(r12*x1818);
CheckValue<IkReal> x1831 = IKatan2WithCheck(IkReal((((x1817*x1819*x1826))+((x1815*x1820*x1821))+(((-1.0)*x1815*x1819*x1826))+(((-1.0)*x1817*x1820*x1821))+((r02*x1815*x1823))+(((-1.0)*x1817*x1825*x1827))+(((-1.0)*x1815*x1816*x1824))+(((-1.0)*r02*x1817*x1823))+((x1815*x1825*x1827))+((x1817*x1830))+((x1816*x1817*x1824))+(((-1.0)*x1815*x1830)))),IkReal(((((-1.0)*r00*x1815*x1822))+(((-1.0)*r10*x1817*x1820))+(((-1.0)*x1816*x1817*x1828))+((sj5*x1817*x1829))+((r10*x1815*x1820))+(((-1.0)*x1815*x1828*x1829))+((r00*x1817*x1822))+((sj5*x1815*x1816)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1831.valid){
continue;
}
CheckValue<IkReal> x1832=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01*x1818))+(((-1.0)*r12*x1826))+(((-1.0)*x1823*x1825))+(((-1.0)*r02*x1827))+(((-0.999999999958557)*r11*x1822))+(((-1.0)*x1818*x1819)))),-1);
if(!x1832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1831.value)+(((1.5707963267949)*(x1832.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1833=IKcos(j4);
IkReal x1834=IKsin(j4);
IkReal x1835=((9.10415855677118e-6)*cj5);
IkReal x1836=(r11*sj5);
IkReal x1837=((0.999999999958557)*r02);
IkReal x1838=((0.999999999958557)*r12);
IkReal x1839=((1.0)*cj2);
IkReal x1840=(cj3*sj1);
IkReal x1841=(cj0*r00);
IkReal x1842=((9.10415855677118e-6)*sj5);
IkReal x1843=(cj1*cj3);
IkReal x1844=(cj5*r00);
IkReal x1845=((0.999999999958557)*r22);
IkReal x1846=((1.0)*cj5);
IkReal x1847=(r01*sj5);
IkReal x1848=(sj0*x1834);
IkReal x1849=(r10*x1842);
IkReal x1850=(cj0*x1834);
IkReal x1851=(r21*x1833);
IkReal x1852=(cj0*x1833);
IkReal x1853=(r20*x1834);
IkReal x1854=((1.0)*x1847);
IkReal x1855=(sj0*x1833);
IkReal x1856=(r21*x1834);
IkReal x1857=(x1833*x1846);
evalcond[0]=(((r20*x1833*x1842))+((sj1*sj2))+((x1835*x1851))+(((-1.0)*x1846*x1853))+((sj5*x1856))+(((-1.0)*x1833*x1845))+(((-1.0)*cj1*x1839)));
evalcond[1]=(((x1834*x1845))+(((-1.0)*x1839*x1840))+(((-1.0)*x1835*x1856))+(((-1.0)*x1842*x1853))+(((-1.0)*sj2*x1843))+((sj5*x1851))+(((-1.0)*r20*x1857)));
evalcond[2]=((((-1.0)*x1848*x1854))+((r11*x1835*x1852))+((x1837*x1855))+((x1849*x1852))+(((-1.0)*r01*x1835*x1855))+((x1844*x1848))+((x1836*x1850))+(((-1.0)*x1838*x1852))+(((-1.0)*r00*x1842*x1855))+(((-1.0)*r10*x1846*x1850)));
evalcond[3]=((((-1.0)*sj3))+(((-1.0)*x1849*x1850))+((x1836*x1852))+((x1838*x1850))+((x1844*x1855))+((r01*x1835*x1848))+(((-1.0)*x1837*x1848))+(((-1.0)*x1854*x1855))+(((-1.0)*r10*x1846*x1852))+(((-1.0)*r11*x1835*x1850))+((r00*x1842*x1848)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r10*x1846*x1848))+((x1836*x1848))+((r11*x1835*x1855))+(((-1.0)*x1834*x1841*x1846))+((cj1*sj2))+((x1849*x1855))+((x1847*x1850))+(((-1.0)*x1838*x1855))+(((-1.0)*x1837*x1852))+((r01*x1835*x1852))+((x1833*x1841*x1842)));
evalcond[5]=(((x1838*x1848))+(((-1.0)*x1834*x1841*x1842))+((x1837*x1850))+(((-1.0)*x1839*x1843))+(((-1.0)*r01*x1835*x1850))+((x1836*x1855))+((x1847*x1852))+((sj2*x1840))+(((-1.0)*x1841*x1857))+(((-1.0)*r11*x1835*x1848))+(((-1.0)*x1848*x1849))+(((-1.0)*r10*x1846*x1855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "5bc468f964ebebbd429392d69c754b2f"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
